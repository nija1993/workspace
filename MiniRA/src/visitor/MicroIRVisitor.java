//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MicroIRVisitor<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	class TempDet{
		String name;
		boolean islive;
		boolean isarg;
		Stack<String> register = new Stack<String>();
		TempDet(){
			islive = true;
			isarg = false;
		}
	}
	class ProcDetails{
		String name;
		int args;
		int stack;
		int max_args;
		HashMap<String,TempDet> temp_reg = new LinkedHashMap<String,TempDet>();
	}
	HashMap<String,ProcDetails> proc = new LinkedHashMap<String, MicroIRVisitor<R>.ProcDetails>();
	PriorityQueue<Integer> t = new PriorityQueue<Integer>();
	PriorityQueue<Integer> s = new PriorityQueue<Integer>();
	int no_of_parse = 0;
	String proc_name = "";
	boolean reg_v0 = true;
	boolean reg_v1 = true;
	
	public MicroIRVisitor(int no) {
		// TODO Auto-generated constructor stub
		int i = 0;
		no_of_parse = no;
		for(i = 0 ;i < 10 ; i++)
		{
			t.add(i);
		}
		for(i = 0; i < 8; i++)
		{
			s.add(i);
		}
	}
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      proc_name = "MAIN";
      if(no_of_parse == 0)
      {
    	  ProcDetails p = new ProcDetails();
    	  p.args = 0;
    	  p.stack = 0;
    	  p.max_args = 0;
    	  p.name = proc_name;
    	  proc.put(proc_name, p);
    	  n.f1.accept(this);
      }
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  Stack<Node> s = new Stack<Node>();
    	  for ( Enumeration<Node> e = n.f0.elements(); e.hasMoreElements(); ) {
              s.push(e.nextElement());
          }
    	  while(!s.empty())
    	  {
    		  s.pop().accept(this);
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      proc_name = (String)n.f0.accept(this);
      int args = Integer.parseInt(n.f2.f0.toString());
      if(no_of_parse == 0)
      {
    	  ProcDetails p = new ProcDetails();
    	  p.args = args;
    	  int i = 0;
    	  for(;i < args && i < 4; i++)
    		  s.poll();
    	  p.name = proc_name;
    	  p.max_args = 0;
    	  p.stack = args;
    	  proc.put(proc_name, p);
	      n.f4.accept(this);
	      for(i = 0;i < args && i < 4; i++)
    		  s.add(i);
      }
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      System.out.println(n);
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      String temp = (String)n.f1.accept(this);
      String l = n.f2.f0.toString();
      if(no_of_parse == 0)
      {
	      if(!proc.get(proc_name).temp_reg.containsKey(temp))
	      {
	    	  int temp_no = Integer.parseInt(temp.substring(5));
	    	  TempDet tem = new TempDet();
	    	  tem.name = temp;
	    	  if(temp_no <= 3)
	    	  {
	    		  tem.register.push("a"+Integer.toString(temp_no));
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else if(temp_no <= 19)
	    	  {
	    		  tem.register.push("stack");
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else
	    	  {
	    		  tem.register.push("t"+Integer.toString(t.poll()));
	    		  System.out.println(tem.register.peek());
	    	  }
	    	  proc.get(proc_name).temp_reg.put(temp, tem);
	      }
	      else
	      {
	    	  TempDet tem = proc.get(proc_name).temp_reg.get(temp);
	    	  if(!tem.islive)
	    	  {
	    		  if(!tem.isarg)
	    		  {
	    			  tem.islive = true;
	    			  tem.register.push("t"+Integer.toString(t.poll()));
	    			  System.out.println(tem.register.peek());
	    			  proc.get(proc_name).temp_reg.put(temp, tem);
	    		  }
	    	  }
	      }
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      String temp1 = (String)n.f1.accept(this);
      int literal = Integer.parseInt(n.f2.f0.toString());
      String temp2 = (String)n.f3.accept(this);
      if(no_of_parse == 0)
      {
    	  if(!proc.get(proc_name).temp_reg.containsKey(temp1))
	      {
	    	  int temp_no = Integer.parseInt(temp1.substring(5));
	    	  TempDet tem = new TempDet();
	    	  tem.name = temp1;
	    	  if(temp_no <= 3)
	    	  {
	    		  tem.register.push("a"+Integer.toString(temp_no));
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else if(temp_no <= 19)
	    	  {
	    		  tem.register.push("stack");
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else
	    	  {
	    		  tem.register.push("t"+Integer.toString(t.poll()));
	    		  System.out.println(tem.register.peek());
	    	  }
	    	  proc.get(proc_name).temp_reg.put(temp1, tem);
	      }
	      else
	      {
	    	  TempDet tem = proc.get(proc_name).temp_reg.get(temp1);
	    	  if(!tem.islive)
	    	  {
	    		  if(!tem.isarg)
	    		  {
	    			  tem.islive = true;
	    			  tem.register.push("t"+Integer.toString(t.poll()));
	    			  System.out.println(tem.register.peek());
	    			  proc.get(proc_name).temp_reg.put(temp1, tem);
	    		  }
	    	  }
	      }
    	  if(!proc.get(proc_name).temp_reg.containsKey(temp2))
	      {
	    	  int temp_no = Integer.parseInt(temp2.substring(5));
	    	  TempDet tem = new TempDet();
	    	  tem.name = temp2;
	    	  if(temp_no <= 3)
	    	  {
	    		  tem.register.push("a"+Integer.toString(temp_no));
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else if(temp_no <= 19)
	    	  {
	    		  tem.register.push("stack");
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else
	    	  {
	    		  tem.register.push("t"+Integer.toString(t.poll()));
	    		  System.out.println(tem.register.peek());
	    	  }
	    	  proc.get(proc_name).temp_reg.put(temp2, tem);
	      }
	      else
	      {
	    	  TempDet tem = proc.get(proc_name).temp_reg.get(temp2);
	    	  if(!tem.islive)
	    	  {
	    		  if(!tem.isarg)
	    		  {
	    			  tem.islive = true;
	    			  tem.register.push("t"+Integer.toString(t.poll()));
	    			  System.out.println(tem.register.peek());
	    			  proc.get(proc_name).temp_reg.put(temp2, tem);
	    		  }
	    	  }
	      }
      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      String temp1 = (String)n.f1.accept(this);
      String temp2 = (String)n.f2.accept(this);
      int literal = Integer.parseInt(n.f3.f0.toString());
      if(no_of_parse == 0)
      {
    	  if(proc.get(proc_name).temp_reg.containsKey(temp1))
    	  {
    		  TempDet tem = proc.get(proc_name).temp_reg.get(temp1);
    		  tem.islive = false;
    		  if(tem.register.peek().contains("t"))
    			  t.add(Integer.parseInt(tem.register.peek().substring(1)));
    		  else
    			  s.add(Integer.parseInt(tem.register.peek().substring(1)));
    		  proc.get(proc_name).temp_reg.put(temp1, tem);
    	  }
    	  if(!proc.get(proc_name).temp_reg.containsKey(temp2))
	      {
	    	  int temp_no = Integer.parseInt(temp2.substring(5));
	    	  TempDet tem = new TempDet();
	    	  tem.name = temp2;
	    	  if(temp_no <= 3)
	    	  {
	    		  tem.register.push("a"+Integer.toString(temp_no));
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else if(temp_no <= 19)
	    	  {
	    		  tem.register.push("stack");
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else
	    	  {
	    		  tem.register.push("t"+Integer.toString(t.poll()));
	    		  System.out.println(tem.register.peek());
	    	  }
	    	  proc.get(proc_name).temp_reg.put(temp2, tem);
	      }
	      else
	      {
	    	  TempDet tem = proc.get(proc_name).temp_reg.get(temp2);
	    	  if(!tem.islive)
	    	  {
	    		  if(!tem.isarg)
	    		  {
	    			  tem.islive = true;
	    			  tem.register.push("t"+Integer.toString(t.poll()));
	    			  System.out.println(tem.register.peek());
	    			  proc.get(proc_name).temp_reg.put(temp2, tem);
	    		  }
	    	  }
	      }
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      String temp = (String)n.f1.accept(this);
      if(no_of_parse == 0)
      {
//    	  System.out.println("checking "+temp);
    	  if(proc.get(proc_name).temp_reg.containsKey(temp))
    	  {
    		  TempDet tem = proc.get(proc_name).temp_reg.get(temp);
    		  tem.islive = false;
    		  System.out.println("entering");
    		  System.out.println(tem.register.peek());
    		  if(tem.register.peek().contains("t"))
    			  t.add(Integer.parseInt(tem.register.peek().substring(1)));
    		  else
    			  s.add(Integer.parseInt(tem.register.peek().substring(1)));
    		  proc.get(proc_name).temp_reg.put(temp, tem);
    	  }
    	  String exp = (String)n.f2.accept(this);
    	  if(exp != null && exp.contains("TEMP"))
    	  {
    		  if(!proc.get(proc_name).temp_reg.containsKey(exp))
    	      {
    	    	  int temp_no = Integer.parseInt(exp.substring(5));
    	    	  TempDet tem = new TempDet();
    	    	  tem.name = exp;
    	    	  if(temp_no <= 3)
    	    	  {
    	    		  tem.register.push("a"+Integer.toString(temp_no));
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else if(temp_no <= 19)
    	    	  {
    	    		  tem.register.push("stack");
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else
    	    	  {
    	    		  tem.register.push("t"+Integer.toString(t.poll()));
    	    		  System.out.println(tem.register.peek());
    	    	  }
    	    	  proc.get(proc_name).temp_reg.put(exp, tem);
    	      }
    	      else
    	      {
    	    	  TempDet tem = proc.get(proc_name).temp_reg.get(exp);
    	    	  if(!tem.islive)
    	    	  {
    	    		  if(!tem.isarg)
    	    		  {
    	    			  tem.islive = true;
    	    			  tem.register.push("t"+Integer.toString(t.poll()));
    	    			  proc.get(proc_name).temp_reg.put(exp, tem);
    	    			  System.out.println(tem.register.peek());
    	    		  }
    	    	  }
    	      }
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      String simpexp = (String)n.f1.accept(this);
//      System.out.println(simpexp);
      if(no_of_parse == 0)
      {
    	  if(simpexp != null && simpexp.contains("TEMP"))
    	  {
//    		  System.out.println("entering if");
    		  if(!proc.get(proc_name).temp_reg.containsKey(simpexp))
    	      {
    	    	  int temp_no = Integer.parseInt(simpexp.substring(5));
    	    	  TempDet tem = new TempDet();
    	    	  tem.name = simpexp;
    	    	  if(temp_no <= 3)
    	    	  {
    	    		  tem.register.push("a"+Integer.toString(temp_no));
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else if(temp_no <= 19)
    	    	  {
    	    		  tem.register.push("stack");
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else
    	    	  {
    	    		  tem.register.push("t"+Integer.toString(t.poll()));
//    	    		  System.out.println("success");
    	    		  System.out.println(tem.register.peek());
    	    	  }
//    	    	  System.out.println("putting");
    	    	  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	      }
    	      else
    	      {
    	    	  TempDet tem = proc.get(proc_name).temp_reg.get(simpexp);
    	    	  if(!tem.islive)
    	    	  {
    	    		  if(!tem.isarg)
    	    		  {
    	    			  tem.islive = true;
    	    			  tem.register.push("t"+Integer.toString(t.poll()));
    	    			  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	    		  }
    	    	  }
    	      }
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  String simpexp = (String)n.f3.accept(this);
    	  if(simpexp != null && simpexp.contains("TEMP"))
    	  {
    		  if(!proc.get(proc_name).temp_reg.containsKey(simpexp))
    	      {
    	    	  int temp_no = Integer.parseInt(simpexp.substring(5));
    	    	  TempDet tem = new TempDet();
    	    	  tem.name = simpexp;
    	    	  if(temp_no <= 3)
    	    	  {
    	    		  tem.register.push("a"+Integer.toString(temp_no));
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else if(temp_no <= 19)
    	    	  {
    	    		  tem.register.push("stack");
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else
    	    	  {
    	    		  tem.register.push("t"+Integer.toString(t.poll()));
    	    		  System.out.println(tem.register.peek());
    	    	  }
    	    	  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	      }
    	      else
    	      {
    	    	  TempDet tem = proc.get(proc_name).temp_reg.get(simpexp);
    	    	  if(!tem.islive)
    	    	  {
    	    		  if(!tem.isarg)
    	    		  {
    	    			  tem.islive = true;
    	    			  tem.register.push("t"+Integer.toString(t.poll()));
    	    			  System.out.println(tem.register.peek());
    	    			  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	    		  }
    	    	  }
    	      }
    	  }
	      n.f1.accept(this);
      }
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      String simpexp = (String)n.f1.accept(this);
      if(no_of_parse == 0)
      {
    	  System.out.println("entering call");
    	  int args = proc.get(proc_name).max_args;
    	  int no_of_args = n.f3.size();
    	  if(no_of_args > args)
    		  proc.get(proc_name).max_args = args;
    	  for(String key : proc.get(proc_name).temp_reg.keySet())
    	  {
    		  TempDet tem = proc.get(proc_name).temp_reg.get(key);
    		  if(tem.islive)
    		  {
    			  t.add(Integer.parseInt(tem.register.peek().substring(1)));
    			  tem.register.push("s"+Integer.toString(s.poll()));
    			  proc.get(proc_name).stack++;
    			  proc.get(proc_name).temp_reg.put(key, tem);
    		  }
    	  }
    	  if(simpexp != null && simpexp.contains("TEMP"))
    	  {
    		  if(!proc.get(proc_name).temp_reg.containsKey(simpexp))
    	      {
    	    	  int temp_no = Integer.parseInt(simpexp.substring(5));
    	    	  TempDet tem = new TempDet();
    	    	  tem.name = simpexp;
    	    	  if(temp_no <= 3)
    	    	  {
    	    		  tem.register.push("a"+Integer.toString(temp_no));
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else if(temp_no <= 19)
    	    	  {
    	    		  tem.register.push("stack");
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else
    	    	  {
    	    		  tem.register.push("t"+Integer.toString(t.poll()));
    	    		  System.out.println(tem.register.peek());
    	    	  }
    	    	  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	      }
    	      else
    	      {
    	    	  TempDet tem = proc.get(proc_name).temp_reg.get(simpexp);
    	    	  if(!tem.islive)
    	    	  {
    	    		  if(!tem.isarg)
    	    		  {
    	    			  tem.islive = true;
    	    			  tem.register.push("t"+Integer.toString(t.poll()));
    	    			  System.out.println(tem.register.peek());
    	    			  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	    		  }
    	    	  }
    	      }
    	  }
    	  for ( Enumeration<Node> e = n.f3.elements(); e.hasMoreElements(); ) {
              String temp = (String)e.nextElement().accept(this);
              if(!proc.get(proc_name).temp_reg.containsKey(temp))
    	      {
    	    	  int temp_no = Integer.parseInt(temp.substring(5));
    	    	  TempDet tem = new TempDet();
    	    	  tem.name = temp;
    	    	  if(temp_no <= 3)
    	    	  {
    	    		  tem.register.push("a"+Integer.toString(temp_no));
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else if(temp_no <= 19)
    	    	  {
    	    		  tem.register.push("stack");
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else
    	    	  {
    	    		  tem.register.push("t"+Integer.toString(t.poll()));
    	    		  System.out.println(tem.register.peek());
    	    	  }
    	    	  proc.get(proc_name).temp_reg.put(temp, tem);
    	      }
    	      else
    	      {
    	    	  TempDet tem = proc.get(proc_name).temp_reg.get(temp);
    	    	  if(!tem.islive)
    	    	  {
    	    		  if(!tem.isarg)
    	    		  {
    	    			  tem.islive = true;
    	    			  tem.register.push("t"+Integer.toString(t.poll()));
    	    			  System.out.println(tem.register.peek());
    	    			  proc.get(proc_name).temp_reg.put(temp, tem);
    	    		  }
    	    	  }
    	      }
           }
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      String simpexp = (String)n.f1.accept(this);
      if(no_of_parse == 0)
      {
    	  if(simpexp != null && simpexp.contains("TEMP"))
    	  {
    		  if(!proc.get(proc_name).temp_reg.containsKey(simpexp))
    	      {
    	    	  int temp_no = Integer.parseInt(simpexp.substring(5));
    	    	  TempDet tem = new TempDet();
    	    	  tem.name = simpexp;
    	    	  if(temp_no <= 3)
    	    	  {
    	    		  tem.register.push("a"+Integer.toString(temp_no));
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else if(temp_no <= 19)
    	    	  {
    	    		  tem.register.push("stack");
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else
    	    	  {
    	    		  tem.register.push("t"+Integer.toString(t.poll()));
    	    		  System.out.println(tem.register.peek());
    	    	  }
    	    	  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	      }
    	      else
    	      {
    	    	  TempDet tem = proc.get(proc_name).temp_reg.get(simpexp);
    	    	  if(!tem.islive)
    	    	  {
    	    		  if(!tem.isarg)
    	    		  {
    	    			  tem.islive = true;
    	    			  tem.register.push("t"+Integer.toString(t.poll()));
    	    			  System.out.println(tem.register.peek());
    	    			  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	    		  }
    	    	  }
    	      }
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String op = (String)n.f0.accept(this);
      String temp = (String)n.f1.accept(this);
      String simpexp = (String)n.f2.accept(this);
      if(no_of_parse == 0)
      {
    	  if(!proc.get(proc_name).temp_reg.containsKey(temp))
	      {
	    	  int temp_no = Integer.parseInt(temp.substring(5));
	    	  TempDet tem = new TempDet();
	    	  tem.name = temp;
	    	  if(temp_no <= 3)
	    	  {
	    		  tem.register.push("a"+Integer.toString(temp_no));
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else if(temp_no <= 19)
	    	  {
	    		  tem.register.push("stack");
	    		  System.out.println(tem.register.peek());
	    		  tem.isarg = true;
	    		  tem.islive = false;
	    	  }
	    	  else
	    	  {
	    		  tem.register.push("t"+Integer.toString(t.poll()));
	    		  System.out.println(tem.register.peek());
	    	  }
	    	  proc.get(proc_name).temp_reg.put(temp, tem);
	      }
	      else
	      {
	    	  TempDet tem = proc.get(proc_name).temp_reg.get(temp);
	    	  if(!tem.islive)
	    	  {
	    		  if(!tem.isarg)
	    		  {
	    			  tem.islive = true;
	    			  tem.register.push("t"+Integer.toString(t.poll()));
	    			  System.out.println(tem.register.peek());
	    			  proc.get(proc_name).temp_reg.put(temp, tem);
	    		  }
	    	  }
	      }
    	  if(simpexp != null && simpexp.contains("TEMP"))
    	  {
    		  if(!proc.get(proc_name).temp_reg.containsKey(simpexp))
    	      {
    	    	  int temp_no = Integer.parseInt(simpexp.substring(5));
    	    	  TempDet tem = new TempDet();
    	    	  tem.name = simpexp;
    	    	  if(temp_no <= 3)
    	    	  {
    	    		  tem.register.push("a"+Integer.toString(temp_no));
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else if(temp_no <= 19)
    	    	  {
    	    		  tem.register.push("stack");
    	    		  System.out.println(tem.register.peek());
    	    		  tem.isarg = true;
    	    		  tem.islive = false;
    	    	  }
    	    	  else
    	    	  {
    	    		  tem.register.push("t"+Integer.toString(t.poll()));
    	    		  System.out.println(tem.register.peek());
    	    	  }
    	    	  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	      }
    	      else
    	      {
    	    	  TempDet tem = proc.get(proc_name).temp_reg.get(simpexp);
    	    	  if(!tem.islive)
    	    	  {
    	    		  if(!tem.isarg)
    	    		  {
    	    			  tem.islive = true;
    	    			  tem.register.push("t"+Integer.toString(t.poll()));
    	    			  System.out.println(tem.register.peek());
    	    			  proc.get(proc_name).temp_reg.put(simpexp, tem);
    	    		  }
    	    	  }
    	      }
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      return (R)n.f0.choice.toString();
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      return n.f0.accept(this);
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
	   System.out.println(("TEMP "+n.f1.accept(this).toString()));
      return (R)("TEMP "+n.f1.accept(this).toString());
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      return (R)n.f0.toString();
   }

}
