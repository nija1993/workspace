//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class IRVisitor<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	class Live{
		int start;
		int end;
		String register;
		String temp;
		boolean isspilled;
		boolean iscallee;
		boolean merge;
		Live(){
			start = 0;
			end = 0;
			iscallee = false;
			isspilled = false;
			merge = false;
		}
	}
	
	class LabelDet{
		int start;
		int end;
	}
	
	class TempDet{
		String name;
		boolean isarg;
		LinkedList<Live> liveness = new LinkedList<Live>();
		TempDet(){
			isarg = false;
		}
	}
	class StmtDet{
		int number;
		Set<String> in = new LinkedHashSet<String>();
		Set<String> out = new LinkedHashSet<String>();
		Set<String> def = new LinkedHashSet<String>();
		Set<String> use = new LinkedHashSet<String>();
		Set<String> succ = new LinkedHashSet<String>();
	}
	class ProcDetails{
		String name;
		int args;
		int stack;
		int max_args;
		HashMap<String,LabelDet> label = new LinkedHashMap<String,LabelDet>();
		HashMap<String,StmtDet> stmt = new LinkedHashMap<String,StmtDet>();
		HashMap<String,TempDet> temp_reg = new LinkedHashMap<String,TempDet>();
	}
	HashMap<String,ProcDetails> proc = new LinkedHashMap<String, IRVisitor<R>.ProcDetails>();
	PriorityQueue<Integer> t = new PriorityQueue<Integer>();
	PriorityQueue<Integer> s = new PriorityQueue<Integer>();
	public int no_of_parse = 0;
	int index = 1;
	String proc_name = "";
	boolean reg_v0 = true;
	boolean reg_v1 = true;
	boolean islabel = false;
	HashMap<String,String> labelindicate = new HashMap<String,String>();
	String lab = "";
	
	public IRVisitor(int no) {
		// TODO Auto-generated constructor stub
		int i = 0;
		no_of_parse = no;
		for(i = 0 ;i < 10 ; i++)
		{
			t.add(i);
		}
		for(i = 0; i < 8; i++)
		{
			s.add(i);
		}
	}
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */
   public R visit(Goal n) {
      R _ret=null;
      proc_name = "MAIN";
      if(no_of_parse == 0)
      {
    	  index = 1;
    	  ProcDetails p = new ProcDetails();
    	  p.args = 0;
    	  p.stack = 0;
    	  p.max_args = 0;
    	  p.name = proc_name;
    	  proc.put(proc_name, p);
    	  n.f1.accept(this);
    	  n.f3.accept(this);
      }
      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if(no_of_parse == 1)
      {
    	  n.f1.accept(this);
    	  Set<String> inn;
    	  Set<String> outt;
    	  boolean flag;
    	  do{
    		  flag = true;
    		  for(String key : proc.get(proc_name).stmt.keySet())
    		  {
//    			  System.out.println(key);
    			  inn = new LinkedHashSet<String>(proc.get(proc_name).stmt.get(key).in);
    			  outt = new LinkedHashSet<String>(proc.get(proc_name).stmt.get(key).out);
//    			  System.out.println("outvalue1 "+proc.get(proc_name).stmt.get(key).out);
//    			  for(String seein : outt)
    			  Set<String> diff = proc.get(proc_name).stmt.get(key).out;
//    			  for(String seein : outt)
//    				  System.out.println("outt3 "+seein);
    			  diff.removeAll(proc.get(proc_name).stmt.get(key).def);
//    			  for(String seein : outt)
//    				  System.out.println("outt4 "+seein);
    			  proc.get(proc_name).stmt.get(key).in = proc.get(proc_name).stmt.get(key).use;
//    			  for(String seein : outt)
//    				  System.out.println("outt5 "+seein);
    			  proc.get(proc_name).stmt.get(key).in.addAll(diff);
//    			  for(String seein : outt)
//    				  System.out.println("outt6 "+seein);
//    			  System.out.println("outvalue2 "+proc.get(proc_name).stmt.get(key).out);
    			  proc.get(proc_name).stmt.get(key).out.clear();
//    			  for(String seein : outt)
//    				  System.out.println("outt7 "+seein);
    			  Set<String> set = new LinkedHashSet<String>();
    			  for(String node : proc.get(proc_name).stmt.get(key).succ)
    			  {
    				  set.addAll(proc.get(proc_name).stmt.get(node).in);
//    				  System.out.println("outvalue4 "+proc.get(proc_name).stmt.get(key).out);
//    				  for(String seein : outt)
//        				  System.out.println("manda!! outt8 "+seein);
    			  }
    			  proc.get(proc_name).stmt.get(key).out = set;
//    				  System.out.println("in "+proc.get(proc_name).stmt.get(key).in);
//    			  for(String seein : proc.get(proc_name).stmt.get(key).out)
//    				  System.out.println("out "+proc.get(proc_name).stmt.get(key).out);
    			  if(!flag)
    				  continue;
    			  flag = (inn.equals(proc.get(proc_name).stmt.get(key).in) && outt.equals(proc.get(proc_name).stmt.get(key).out));
    			  inn.clear();
    			  outt.clear();
//    			  System.out.println("flag "+flag);
    		  }
    	  }while(flag == false);
    	  
    	  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    	  
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
//    		  System.out.println(key);
    		  Set<String> in = new LinkedHashSet<String>(proc.get(proc_name).stmt.get(key).in);
    		  Set<String> out = new LinkedHashSet<String>(proc.get(proc_name).stmt.get(key).out);
    		  for(String trav : out)
    		  {
    			  if(Integer.parseInt(trav.substring(5)) < proc.get(proc_name).args)
    			  {
    				  if(!proc.get(proc_name).temp_reg.containsKey(trav))
    				  {
    					  TempDet tem = new TempDet();
    					  tem.isarg = true;
    					  proc.get(proc_name).temp_reg.put(trav, tem);
    				  }
    				  continue;
    			  }
    			  if(proc.get(proc_name).temp_reg.containsKey(trav) && !in.contains(trav))
    			  {
//    				  System.out.println("exist and out "+trav);
    				  if(proc.get(proc_name).temp_reg.get(trav).liveness.getLast().end != 0)
    				  {
						  Live l = new Live();
						  l.start = proc.get(proc_name).stmt.get(key).number;
						  l.temp = trav;
						  proc.get(proc_name).temp_reg.get(trav).liveness.add(l);
    				  }
    			  }
    			  else if(!proc.get(proc_name).temp_reg.containsKey(trav) && !in.contains(trav)){
//    				  System.out.println("nonexist and out "+trav);
    				  TempDet tem = new TempDet();
    				  tem.name = trav;
    				  Live l = new Live();
    				  l.start = proc.get(proc_name).stmt.get(key).number;
    				  l.temp = trav;
    				  tem.liveness.add(l);
    				  proc.get(proc_name).temp_reg.put(trav, tem);
    			  }
    		  }
    		  for(String trav : in)
    		  {
    			  if(Integer.parseInt(trav.substring(5)) < 20)
    				  continue;
    			  if(!out.contains(trav))
    			  {
//    				  System.out.println("exist and in " +trav);
    				  proc.get(proc_name).temp_reg.get(trav).liveness.getLast().end = proc.get(proc_name).stmt.get(key).number;
    			  }
    		  }
    	  }
    	  for(TempDet tem : proc.get(proc_name).temp_reg.values())
    	  {
    		  for(Live live : tem.liveness)
    		  {
    			  if(live.end == 0)
    			  {
//    				  System.out.println("entering end "+live.temp);
    				  int no = 0;
    				  for(StmtDet s : proc.get(proc_name).stmt.values())
    				  {
    					  if(live.start >= s.number)
    						  continue;
    					  if(s.in.contains(live.temp) && s.out.contains(live.temp))
    					  {
    						  no = s.number;
    						  continue;
    					  }
    					  break;
    				  }
    				  int index = proc.get(proc_name).temp_reg.get(live.temp).liveness.indexOf(live);
    				  proc.get(proc_name).temp_reg.get(live.temp).liveness.get(index).end = no;
    			  }
    		  }
    	  }
    	  n.f3.accept(this);
      }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if(no_of_parse == 2)
      {
    	  n.f1.accept(this);
    	  List<Live> notcallee_sortbegin = new LinkedList<Live>();
    	  List<Live> callee_sortbegin = new LinkedList<Live>();
    	  for(String key : proc.get(proc_name).temp_reg.keySet())
    	  {
    		  for(Live live : proc.get(proc_name).temp_reg.get(key).liveness)
    		  {
    			  if(!live.iscallee)
    			  {
    				  notcallee_sortbegin.add(live);
    			  }
    			  else
    			  {
    				  callee_sortbegin.add(live);
    			  }
    		  }
    	  }
    	  Collections.sort(notcallee_sortbegin,new Comparator<Live>(){
			@Override
			public int compare(Live arg0, Live arg1) {
				// TODO Auto-generated method stub
				if(arg0.start < arg1.start)
					return -1;
				else
					return 1;
			}
    	  });
    	  Collections.sort(callee_sortbegin,new Comparator<Live>(){
  			@Override
  			public int compare(Live arg0, Live arg1) {
  				// TODO Auto-generated method stub
  				if(arg0.start < arg1.start)
  					return -1;
  				else
  					return 1;
  			}
      	  });
    	  PriorityQueue<Live> active = new PriorityQueue<Live>(10,new Comparator<Live>(){
    		 @Override
    		 public int compare(Live arg0, Live arg1){
    			// TODO Auto-generated method stub
   				if(arg0.end < arg1.end)
   					return -1;
   				else
   					return 1;
    		 }
    	  });
    	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    	  for(Live live : notcallee_sortbegin)
    	  {
    		  PriorityQueue<Live> action = new PriorityQueue<Live>(active);
//    		  System.out.println("SPARTAAAAAAAAAAA");
    		  while(action.size() > 0)
    		  {
    			  Live act = action.poll();
//    			  System.out.println("Checking active "+act.start);
    			  if(act.end >= live.start)
    				  break;
    			  active.poll();
    			  t.add(Integer.parseInt(act.register.substring(1)));
    		  }
    		  if(active.size() == 10)
    		  {
//    			  System.out.println("checking spill");
    			  Live spill = null;
    			  PriorityQueue<Live> active_copy = new PriorityQueue<Live>(active);
    			  while(active_copy.size() > 0){
    				  spill = active_copy.poll();
//    				  System.out.println("Checking active "+spill.end);
    			  }
    			  if(spill.end > live.end)
    			  {
    				  live.register = spill.register;
    				  for(Live it : proc.get(proc_name).temp_reg.get(live.temp).liveness)
        			  {
        				  if(live.start == it.start)
        					  it.register = live.register;
        			  }
    				  for(Live it :proc.get(proc_name).temp_reg.get(spill.temp).liveness)
    				  {
    					  if(it.start == spill.start)
    					  {
    						  it.isspilled = true;
    						  it.register = "SPILL "+Integer.toString(proc.get(proc_name).stack++);
    					  }
    				  }
    				  active.remove(spill);
    				  active.add(live);
    			  }
    			  else
    			  {
    				  for(Live it :proc.get(proc_name).temp_reg.get(live.temp).liveness)
    				  {
    					  if(it.start == live.start)
    					  {
    						  it.isspilled = true;
    						  it.register = "SPILL "+Integer.toString(proc.get(proc_name).stack++);
    					  }
    				  }
    			  }
    		  }
    		  else
    		  {
//    			  System.out.println("entering final else");
    			  live.register = "t"+Integer.toString(t.poll());
//    			  System.out.println(live.temp + " " + live.register);
    			  for(Live it : proc.get(proc_name).temp_reg.get(live.temp).liveness)
    			  {
    				  if(live.start == it.start)
    					  it.register = live.register;
    			  }
    			  active.add(live);
    		  }
    	  }
    	  
    	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    	  
    	  for(Live live : callee_sortbegin)
    	  {
    		  PriorityQueue<Live> action = new PriorityQueue<Live>(active);
    		  while(action.size() > 0)
    		  {
    			  Live act = action.poll();
    			  if(act.end >= live.start)
    				  break;
    			  active.poll();
    			  s.add(Integer.parseInt(act.register.substring(1)));
    		  }
    		  if(active.size() == 8)
    		  {
    			  Live spill = null;
    			  PriorityQueue<Live> active_copy = new PriorityQueue<Live>(active);
    			  while(active_copy.size() > 0)
    				  spill = active_copy.poll();
    			  if(spill.end > live.end)
    			  {
    				  live.register = spill.register;
    				  for(Live it : proc.get(proc_name).temp_reg.get(live.temp).liveness)
        			  {
        				  if(live.start == it.start)
        					  it.register = live.register;
        			  }
    				  for(Live it :proc.get(proc_name).temp_reg.get(spill.temp).liveness)
    				  {
    					  if(it.start == spill.start)
    					  {
    						  it.isspilled = true;
    						  it.register = "SPILL "+Integer.toString(proc.get(proc_name).stack++);
    					  }
    				  }
    				  active.remove(spill);
    				  active.add(live);
    			  }
    			  else
    			  {
    				  for(Live it :proc.get(proc_name).temp_reg.get(live.temp).liveness)
    				  {
    					  if(it.start == live.start)
    					  {
    						  it.isspilled = true;
    						  it.register = "SPILL "+Integer.toString(proc.get(proc_name).stack++);
    					  }
    				  }
    			  }
    		  }
    		  else
    		  {
    			  live.register = "s"+Integer.toString(s.poll());
//    			  System.out.println(live.temp + " "+ live.register);
    			  for(Live it : proc.get(proc_name).temp_reg.get(live.temp).liveness)
    			  {
    				  if(live.start == it.start)
    					  it.register = live.register;
    			  }
    			  proc.get(proc_name).stack++;
    			  active.add(live);
    		  }
    	  }
    	  n.f3.accept(this);
      }
      if(no_of_parse == 3)
      {
    	  System.out.println("MAIN ["+proc.get(proc_name).args+"]["+proc.get(proc_name).stack+"]["+proc.get(proc_name).max_args+"]");
    	  n.f1.accept(this);
    	  System.out.println("END");
    	  n.f3.accept(this);
//    	  for(Live live : proc.get("List_Print").temp_reg.get("TEMP 45").liveness)
//    	  {
//    		  System.out.println(live.start+" "+live.end);
//    	  }
      }
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */
   public R visit(Procedure n) {
      R _ret=null;
      proc_name = n.f0.f0.toString();
      int args = Integer.parseInt(n.f2.f0.toString());
      if(no_of_parse == 0)
      {
    	  index = 1;
    	  ProcDetails p = new ProcDetails();
    	  p.args = args;
//    	  int i = 0;
//    	  for(;i < args && i < 4; i++)
//    		  s.poll();
    	  p.name = proc_name;
    	  p.max_args = 0;
    	  p.stack = args;
    	  proc.put(proc_name, p);
	      n.f4.accept(this);
//	      for(i = 0;i < args && i < 4; i++)
//    		  s.add(i);
      }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if(no_of_parse == 1)
      {
    	  index = 1;
    	  n.f4.accept(this);
    	  Set<String> inn;
    	  Set<String> outt;
    	  boolean flag;
    	  do{
    		  flag = true;
    		  for(String key : proc.get(proc_name).stmt.keySet())
    		  {
//    			  System.out.println(key);
    			  inn = new LinkedHashSet<String>(proc.get(proc_name).stmt.get(key).in);
    			  outt = new LinkedHashSet<String>(proc.get(proc_name).stmt.get(key).out);
//    			  System.out.println("outvalue1 "+proc.get(proc_name).stmt.get(key).out);
//    			  for(String seein : outt)
//    				  System.out.println("outt1 "+outt);
//    			  for(String seein : inn)
//    				  System.out.println("inn1 "+inn);
//    			  for(String seein : proc.get(proc_name).stmt.get(key).use)
//    				  System.out.println("use "+seein);
//    			  for(String seein : proc.get(proc_name).stmt.get(key).def)
//    				  System.out.println("def "+seein);
    			  Set<String> diff = proc.get(proc_name).stmt.get(key).out;
//    			  for(String seein : outt)
//    				  System.out.println("outt3 "+seein);
    			  diff.removeAll(proc.get(proc_name).stmt.get(key).def);
//    			  for(String seein : outt)
//    				  System.out.println("outt4 "+seein);
    			  proc.get(proc_name).stmt.get(key).in = proc.get(proc_name).stmt.get(key).use;
//    			  for(String seein : outt)
//    				  System.out.println("outt5 "+seein);
    			  proc.get(proc_name).stmt.get(key).in.addAll(diff);
//    			  for(String seein : outt)
//    				  System.out.println("outt6 "+seein);
//    			  System.out.println("outvalue2 "+proc.get(proc_name).stmt.get(key).out);
    			  proc.get(proc_name).stmt.get(key).out.clear();
//    			  for(String seein : outt)
//    				  System.out.println("outt7 "+seein);
    			  Set<String> set = new LinkedHashSet<String>();
    			  for(String node : proc.get(proc_name).stmt.get(key).succ)
    			  {
//    				  for(String seein : outt)
//        				  System.out.println("tommy outt8 "+seein);
//    				  System.out.println("succ "+node);
//    				  for(String seein : outt)
//        				  System.out.println("maddd outt8 "+seein);
//    				  System.out.println("outvalue3 "+proc.get(proc_name).stmt.get(key).out);
    				  set.addAll(proc.get(proc_name).stmt.get(node).in);
//    				  System.out.println("outvalue4 "+proc.get(proc_name).stmt.get(key).out);
//    				  for(String seein : outt)
//        				  System.out.println("manda!! outt8 "+seein);
    			  }
    			  proc.get(proc_name).stmt.get(key).out = set;
//    			  for(String seein : outt)
//    				  System.out.println("jffaa outt8 "+outt);
//    			  for(String seein : outt)
//    				  System.out.println("outt2 "+outt);
//    			  for(String seein : inn)
//    				  System.out.println("inn2 "+inn);
//    			  for(String seein : proc.get(proc_name).stmt.get(key).in)
//    				  System.out.println("in "+proc.get(proc_name).stmt.get(key).in);
//    			  for(String seein : proc.get(proc_name).stmt.get(key).out)
//    				  System.out.println("out "+proc.get(proc_name).stmt.get(key).out);
    			  if(!flag)
    				  continue;
    			  flag = (inn.equals(proc.get(proc_name).stmt.get(key).in) && outt.equals(proc.get(proc_name).stmt.get(key).out));
    			  inn.clear();
    			  outt.clear();
//    			  System.out.println("flag "+flag);
    		  }
    	  }while(flag == false);
    	  
    	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    	  
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
//    		  System.out.println(key);
    		  Set<String> in = new LinkedHashSet<String>(proc.get(proc_name).stmt.get(key).in);
    		  Set<String> out = new LinkedHashSet<String>(proc.get(proc_name).stmt.get(key).out);
    		  for(String trav : out)
    		  {
    			  if(Integer.parseInt(trav.substring(5)) < proc.get(proc_name).args)
    			  {
    				  if(!proc.get(proc_name).temp_reg.containsKey(trav))
    				  {
    					  TempDet tem = new TempDet();
    					  tem.isarg = true;
    					  proc.get(proc_name).temp_reg.put(trav, tem);
    				  }
    				  continue;
    			  }
    			  if(proc.get(proc_name).temp_reg.containsKey(trav) && !in.contains(trav))
    			  {
//    				  System.out.println("exist and out "+trav);
    				  if(proc.get(proc_name).temp_reg.get(trav).liveness.getLast().end != 0)
    				  {
						  Live l = new Live();
						  l.start = proc.get(proc_name).stmt.get(key).number;
						  l.temp = trav;
						  proc.get(proc_name).temp_reg.get(trav).liveness.add(l);
    				  }
    			  }
    			  else if(!proc.get(proc_name).temp_reg.containsKey(trav) && !in.contains(trav)){
//    				  System.out.println("nonexist and out "+trav);
    				  TempDet tem = new TempDet();
    				  tem.name = trav;
    				  Live l = new Live();
    				  l.start = proc.get(proc_name).stmt.get(key).number;
    				  l.temp = trav;
    				  tem.liveness.add(l);
    				  proc.get(proc_name).temp_reg.put(trav, tem);
    			  }
    		  }
    		  for(String trav : in)
    		  {
    			  if(Integer.parseInt(trav.substring(5)) < proc.get(proc_name).args)
    				  continue;
    			  if(!out.contains(trav))
    			  {
//    				  System.out.println("exist and in " +trav);
    				  proc.get(proc_name).temp_reg.get(trav).liveness.getLast().end = proc.get(proc_name).stmt.get(key).number;
    			  }
    		  }
    	  }
//    	  if(proc_name == "List_Print")
//    	  for(Live live : proc.get("List_Print").temp_reg.get("TEMP 45").liveness)
//    	  {
//    		  System.out.println(live.start+" "+live.end);
//    	  }
    	  for(TempDet tem : proc.get(proc_name).temp_reg.values())
    	  {
    		  for(Live live : tem.liveness)
    		  {
    			  if(live.end == 0)
    			  {
//    				  System.out.println("entering end "+live.temp);
    				  int no = 0;
    				  for(StmtDet s : proc.get(proc_name).stmt.values())
    				  {
    					  if(live.start >= s.number)
    						  continue;
    					  if(s.in.contains(live.temp) && s.out.contains(live.temp))
    					  {
    						  no = s.number;
    						  continue;
    					  }
    				  }
    				  int index = proc.get(proc_name).temp_reg.get(live.temp).liveness.indexOf(live);
    				  proc.get(proc_name).temp_reg.get(live.temp).liveness.get(index).end = no;
    			  }
    		  }
    	  }
//    	  for(TempDet tem : proc.get(proc_name).temp_reg.values())
//    	  {
//    		  int ind = -1;
//    		  for(Live live : tem.liveness)
//    		  {
//    			  int index = tem.liveness.indexOf(live);
//    			  if(index+1 < tem.liveness.size())
//    			  {
//    				  Live live2 = tem.liveness.get(index+1);
//    				  for(LabelDet l : proc.get(proc_name).label.values())
//    				  {
//    					  if((live.end > l.start && live.end < l.end) && (live2.start > l.start && live2.start < l.end))
//    					  {
//    						  proc.get(proc_name).temp_reg.get(live.temp).liveness.get(index).merge = true;
//    						  proc.get(proc_name).temp_reg.get(live.temp).liveness.get(index+1).merge = true;
//    						  ind = index;
//    					  }
//    				  }
//    			  }
//    		  }
//    		  if(ind != -1)
//    		  {
//    			  proc.get(proc_name).temp_reg.get(tem.name).liveness.get(ind).end = proc.get(proc_name).temp_reg.get(tem.name).liveness.get(ind+1).end;
//    			  proc.get(proc_name).temp_reg.get(tem.name).liveness.remove(ind+1);
//    		  }
////    	  }
//    	  for(TempDet tem : proc.get(proc_name).temp_reg.values())
//    	  {
//    		  if(tem.liveness.size() > 1)
//    		  {
//    			  proc.get(proc_name).temp_reg.get(tem.name).liveness.get(0).end = proc.get(proc_name).temp_reg.get(tem.name).liveness.getLast().end;
//    			  for(int i = 1; i < tem.liveness.size(); i++)
//    			  {
//    				  proc.get(proc_name).temp_reg.get(tem.name).liveness.remove(i);
//    			  }
//    		  }
//    	  }
    	  
//    	  System.out.println(proc.get("Fac_ComputeFac").temp_reg.get("TEMP 20").liveness.getFirst().start);
//    	  System.out.println(proc.get("Fac_ComputeFac").temp_reg.get("TEMP 20").liveness.getFirst().end);
      }
      
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      
      if(no_of_parse == 2)
      {
    	  Set<String> sregs = new LinkedHashSet<String>();
//    	  System.out.println("New procedure");
    	  t.clear();
    	  s.clear();
    	  for(int i = 0 ;i < 10 ; i++)
		  {
			  t.add(i);
		  }
	  	  for(int i = 0; i < 8; i++)
  		  {
  			  s.add(i);
  		  }
    	  for(int i = 0;i < args && i < 4; i++)
    		  s.poll();
    	  n.f4.accept(this);
    	  List<Live> notcallee_sortbegin = new LinkedList<Live>();
    	  List<Live> callee_sortbegin = new LinkedList<Live>();
    	  for(String key : proc.get(proc_name).temp_reg.keySet())
    	  {
    		  for(Live live : proc.get(proc_name).temp_reg.get(key).liveness)
    		  {
    			  if(!live.iscallee)
    			  {
    				  notcallee_sortbegin.add(live);
    			  }
    			  else
    			  {
    				  callee_sortbegin.add(live);
    			  }
    		  }
    	  }
    	  Collections.sort(notcallee_sortbegin,new Comparator<Live>(){
			@Override
			public int compare(Live arg0, Live arg1) {
				// TODO Auto-generated method stub
				if(arg0.start < arg1.start)
					return -1;
				else
					return 1;
			}
    	  });
    	  Collections.sort(callee_sortbegin,new Comparator<Live>(){
  			@Override
  			public int compare(Live arg0, Live arg1) {
  				// TODO Auto-generated method stub
  				if(arg0.start < arg1.start)
  					return -1;
  				else
  					return 1;
  			}
      	  });
    	  PriorityQueue<Live> active = new PriorityQueue<Live>(10,new Comparator<Live>(){
    		 @Override
    		 public int compare(Live arg0, Live arg1){
    			// TODO Auto-generated method stub
   				if(arg0.end < arg1.end)
   					return -1;
   				else
   					return 1;
    		 }
    	  });
    	  
    	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    	  
    	  for(Live live : notcallee_sortbegin)
    	  {
    		  PriorityQueue<Live> action = new PriorityQueue<Live>(active);
//    		  System.out.println("start");
    		  while(action.size() > 0)
    		  {
    			  Live act = action.poll();
//    			  System.out.println("printing active"+act.temp);
    			  if(act.end >= live.start)
    				  break;
    			  active.poll();
    			  t.add(Integer.parseInt(act.register.substring(1)));
    		  }
    		  if(active.size() == 10)
    		  {
    			  Live spill = null;
    			  PriorityQueue<Live> active_copy = new PriorityQueue<Live>(active);
    			  while(active_copy.size() > 0)
    				  spill = active_copy.poll();
    			  if(spill.end > live.end)
    			  {
    				  live.register = spill.register;
    				  for(Live it : proc.get(proc_name).temp_reg.get(live.temp).liveness)
        			  {
        				  if(live.start == it.start)
        					  it.register = live.register;
        			  }
    				  for(Live it :proc.get(proc_name).temp_reg.get(spill.temp).liveness)
    				  {
    					  if(it.start == spill.start)
    					  {
    						  it.isspilled = true;
    						  it.register = "SPILL "+Integer.toString(proc.get(proc_name).stack++);
    					  }
    				  }
    				  active.remove(spill);
    				  active.add(live);
    			  }
    			  else
    			  {
    				  for(Live it :proc.get(proc_name).temp_reg.get(live.temp).liveness)
    				  {
    					  if(it.start == live.start)
    					  {
    						  it.isspilled = true;
    						  it.register = "SPILL "+Integer.toString(proc.get(proc_name).stack++);
    					  }
    				  }
    			  }
    		  }
    		  else
    		  {
    			  live.register = "t"+Integer.toString(t.poll());
//    			  System.out.println(live.temp + " " +live.register);
    			  for(Live it : proc.get(proc_name).temp_reg.get(live.temp).liveness)
    			  {
    				  if(live.start == it.start)
    					  it.register = live.register;
    			  }
    			  active.add(live);
    		  }
    	  }
    	  
    	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    	  
    	  for(Live live : callee_sortbegin)
    	  {
    		  PriorityQueue<Live> action = new PriorityQueue<Live>(active);
    		  while(action.size() > 0)
    		  {
    			  Live act = action.poll();
    			  if(act.end >= live.start)
    				  break;
    			  active.poll();
    			  s.add(Integer.parseInt(act.register.substring(1)));
    		  }
    		  if(active.size() == 8)
    		  {
    			  Live spill = null;
    			  PriorityQueue<Live> active_copy = new PriorityQueue<Live>(active);
    			  while(active_copy.size() > 0)
    				  spill = active_copy.poll();
    			  if(spill.end > live.end)
    			  {
    				  live.register = spill.register;
    				  for(Live it : proc.get(proc_name).temp_reg.get(live.temp).liveness)
        			  {
        				  if(live.start == it.start)
        					  it.register = live.register;
        			  }
    				  for(Live it :proc.get(proc_name).temp_reg.get(spill.temp).liveness)
    				  {
    					  if(it.start == spill.start)
    					  {
    						  it.isspilled = true;
    						  it.register = "SPILL "+Integer.toString(proc.get(proc_name).stack++);
    					  }
    				  }
    				  active.remove(spill);
    				  active.add(live);
    			  }
    			  else
    			  {
    				  for(Live it :proc.get(proc_name).temp_reg.get(live.temp).liveness)
    				  {
    					  if(it.start == live.start)
    					  {
    						  it.isspilled = true;
    						  it.register = "SPILL "+Integer.toString(proc.get(proc_name).stack++);
    					  }
    				  }
    			  }
    		  }
    		  else
    		  {
    			  live.register = "s"+Integer.toString(s.poll());
//    			  System.out.println(live.temp + " " +live.register);
    			  for(Live it : proc.get(proc_name).temp_reg.get(live.temp).liveness)
    			  {
    				  if(live.start == it.start)
    					  it.register = live.register;
    			  }
    			  if(!sregs.contains(live.register))
    			  {
    				  proc.get(proc_name).stack++;
    				  sregs.add(live.register);
    			  }
    			  active.add(live);
    		  }
    	  }
    	  for(int i=0 ;i < args && i < 4; i++)
    		  s.add(i);
      }
      if(no_of_parse == 3)
      {
    	  System.out.println(proc_name+" ["+proc.get(proc_name).args+"]["+proc.get(proc_name).stack+"]["+proc.get(proc_name).max_args+"]");
    	  n.f4.accept(this);
    	  System.out.println("END");
      }
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      if(islabel && no_of_parse == 3)
    	  System.out.print(lab+" ");
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  if(islabel)
    	  {
    		  labelindicate.put(lab, n.toString());
    		  if(proc.get(proc_name).label.containsKey(lab))
    		  {
    			  proc.get(proc_name).label.get(lab).start = index;
    		  }
    		  else
    		  {
    			  LabelDet la = new LabelDet();
    			  la.start = index;
    			  proc.get(proc_name).label.put(lab, la);
    		  }
    	  }
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put(n.toString(), st);
      }
      if(no_of_parse == 1)
      {
    	  boolean flag = false;
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
    		  if(flag == true)
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).succ.add(key);
    			  flag = false;
    			  break;
    		  }
    		  if(key.equals(n.toString()))
    			  flag = true;
    	  }
      }
      if(no_of_parse == 3)
    	  System.out.println("NOOP");
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  if(islabel)
    		  labelindicate.put(lab, n.toString());
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put(n.toString(), st);
      }
      if(no_of_parse == 1)
      {
    	  boolean flag = false;
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
    		  if(flag == true)
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).succ.add(key);
    			  flag = false;
    			  break;
    		  }
    		  if(key.equals(n.toString()))
    			  flag = true;
    	  }
      }
      if(no_of_parse == 3)
    	  System.out.println("ERROR");
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  if(islabel)
    	  {
    		  labelindicate.put(lab, n.toString());
    	  }
    	  if(proc.get(proc_name).label.containsKey(n.f2.f0.toString()))
		  {
			  proc.get(proc_name).label.get(n.f2.f0.toString()).end = index;
		  }
		  else
		  {
			  LabelDet la = new LabelDet();
			  la.end = index;
			  proc.get(proc_name).label.put(n.f2.f0.toString(), la);
		  }
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put(n.toString(), st);
      }
      if(no_of_parse == 1)
      {
    	  boolean flag = false;
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
    		  if(flag == true)
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).succ.add(key);
    			  flag = false;
    			  break;
    		  }
    		  if(key.equals(n.toString()))
    			  flag = true;
    	  }
    	  proc.get(proc_name).stmt.get(n.toString()).succ.add(labelindicate.get(n.f2.accept(this)));
    	  proc.get(proc_name).stmt.get(n.toString()).use.add(n.f1.accept(this).toString());
      }
      if(no_of_parse == 3)
      {
    	  String temp1 = (String)n.f1.accept(this);
    	  int number = proc.get(proc_name).stmt.get(n.toString()).number;
    	  int temp_index = Integer.parseInt(temp1.substring(5));
		  int proc_args = proc.get(proc_name).args;
		  if(temp_index < proc_args)
		  {
			  if(temp_index < 4)
				  System.out.println("CJUMP s"+temp_index+" "+n.f2.f0.toString());
			  else
			  {
				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index-4));
				  System.out.println("CJUMP v1 "+n.f2.f0.toString());
			  }
		  }
		  else
		  {
			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp1);
			  for(Live live1 : tem1.liveness)
			  {
				  if(number >= live1.start && number <= live1.end)
				  {
					  if(!live1.register.contains("SPILL"))
						  System.out.println("CJUMP "+live1.register+" "+n.f2.f0.toString());
					  else
					  {
						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
						  System.out.println("CJUMP v1 "+n.f2.f0.toString());
					  }
				  }
			  }
		  }
      }
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  if(islabel)
    	  {
    		  labelindicate.put(lab, n.toString());
    	  }
    	  if(proc.get(proc_name).label.containsKey(n.f1.f0.toString()))
		  {
			  proc.get(proc_name).label.get(n.f1.f0.toString()).end = index;
		  }
		  else
		  {
			  LabelDet la = new LabelDet();
			  la.end = index;
			  proc.get(proc_name).label.put(n.f1.f0.toString(), la);
		  }
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put(n.toString(), st);
      }
      if(no_of_parse == 1)
      {
    	  proc.get(proc_name).stmt.get(n.toString()).succ.add(labelindicate.get(n.f1.accept(this)));
      }
      if(no_of_parse == 3)
      {
    	  System.out.println("JUMP "+n.f1.f0.toString());
      }
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  if(islabel)
    		  labelindicate.put(lab, n.toString());
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put(n.toString(), st);
      }
      if(no_of_parse == 1)
      {
    	  boolean flag = false;
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
    		  if(flag == true)
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).succ.add(key);
    			  flag = false;
    			  break;
    		  }
    		  if(key.equals(n.toString()))
    			  flag = true;
    	  }
    	  proc.get(proc_name).stmt.get(n.toString()).use.add(n.f1.accept(this).toString());
    	  proc.get(proc_name).stmt.get(n.toString()).use.add(n.f3.accept(this).toString());
      }
      if(no_of_parse == 3)
      {
    	  String temp1 = (String)n.f1.accept(this);
    	  String temp2 = (String)n.f3.accept(this);
    	  String reg1 = null, reg2 = null;
    	  int number = proc.get(proc_name).stmt.get(n.toString()).number;
    	  String integer = n.f2.f0.toString();
    	  int temp_index = Integer.parseInt(temp1.substring(5));
		  int proc_args = proc.get(proc_name).args;
		  if(temp_index < proc_args)
		  {
			  if(temp_index < 4)
				  reg1 = "s"+temp_index;
			  else
			  {
				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index-4));
				  reg1 = "v1";
			  }
		  }
		  else
		  {
			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp1);
			  for(Live live1 : tem1.liveness)
			  {
				  if(number >= live1.start && number <= live1.end)
				  {
					  if(!live1.register.contains("SPILL"))
						  reg1 = live1.register;
					  else
					  {
						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
						  reg1 = "v1";
					  }
				  }
			  }
		  }
		  temp_index = Integer.parseInt(temp2.substring(5));
		  proc_args = proc.get(proc_name).args;
		  if(temp_index < proc_args)
		  {
			  if(temp_index < 4)
				  reg2 = "s"+temp_index;
			  else
			  {
				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index-4));
				  reg2 = "v1";
			  }
		  }
		  else
		  {
			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
			  for(Live live1 : tem1.liveness)
			  {
				  if(number >= live1.start && number <= live1.end)
				  {
					  if(!live1.register.contains("SPILL"))
						  reg2 = live1.register;
					  else
					  {
						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
						  reg2 = "v1";
					  }
				  }
			  }
		  }
		  System.out.println("HSTORE "+reg1+" "+integer+" "+reg2);
      }
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  if(islabel)
    		  labelindicate.put(lab, n.toString());
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put(n.toString(), st);
      }
      if(no_of_parse == 1)
      {
    	  boolean flag = false;
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
    		  if(flag == true)
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).succ.add(key);
    			  flag = false;
    			  break;
    		  }
    		  if(key.equals(n.toString()))
    			  flag = true;
    	  }
    	  proc.get(proc_name).stmt.get(n.toString()).def.add(n.f1.accept(this).toString());
    	  proc.get(proc_name).stmt.get(n.toString()).use.add(n.f2.accept(this).toString());
      }
      if(no_of_parse == 3)
      {
    	  String temp1 = (String)n.f1.accept(this);
    	  String temp2 = (String)n.f2.accept(this);
    	  int number = proc.get(proc_name).stmt.get(n.toString()).number;
    	  String integer = n.f3.f0.toString();
    	  if(proc.get(proc_name).temp_reg.get(temp1) == null)
    		  return null;
    	  TempDet tem = proc.get(proc_name).temp_reg.get(temp1);
    	  for(Live live : tem.liveness)
    	  {
    		  if(number >= live.start && number <= live.end)
    		  {
    			  if(!live.register.contains("SPILL"))
    			  {
    				  int temp_index = Integer.parseInt(temp2.substring(5));
    	    		  int proc_args = proc.get(proc_name).args;
    	    		  if(temp_index < proc_args)
    	    		  {
    	    			  if(temp_index < 4)
    	    				  System.out.println("HLOAD "+live.register+" s"+temp_index+" "+integer);
    	    			  else
    	    			  {
    	    				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index-4));
    	    				  System.out.println("HLOAD "+live.register+" v1 "+integer);
    	    			  }
    	    		  }
    	    		  else
    	    		  {
    	    			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
    	    			  for(Live live1 : tem1.liveness)
    	    			  {
    	    				  if(number >= live1.start && number <= live1.end)
    	    				  {
    	    					  if(!live1.register.contains("SPILL"))
    	    						  System.out.println("HLOAD "+live.register+" "+live1.register+" "+integer);
    	    					  else
    	    					  {
    	    						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    	    						  System.out.println("HLOAD "+live.register+" v1 "+integer);
    	    					  }
    	    				  }
    	    			  }
    	    		  }
    			  }
    			  else
    			  {
    				  int temp_index = Integer.parseInt(temp2.substring(5));
    	    		  int proc_args = proc.get(proc_name).args;
    	    		  if(temp_index < proc_args)
    	    		  {
    	    			  if(temp_index < 4)
    	    			  {
    	    				  System.out.println("HLOAD v1 s"+temp_index+" "+integer);
    	    				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    			  }
    	    			  else
    	    			  {
    	    				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index-4));
    	    				  System.out.println("HLOAD v0 v1 "+integer);
    	    				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    			  }
    	    		  }
    	    		  else
    	    		  {
    	    			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
    	    			  for(Live live1 : tem1.liveness)
    	    			  {
    	    				  if(number >= live1.start && number <= live1.end)
    	    				  {
    	    					  if(!live1.register.contains("SPILL"))
    	    					  {
    	    						  System.out.println("HLOAD v1 "+live1.register+" "+integer);
    	    						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    					  }
    	    					  else
    	    					  {
    	    						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    	    						  System.out.println("HLOAD v0 v1 "+integer);
    	    						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    					  }
    	    				  }
    	    			  }
    	    		  }
    			  }
    		  }
    	  }
      }
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  if(islabel)
    		  labelindicate.put(lab, n.toString());
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put(n.toString(), st);
      }
      if(no_of_parse == 1)
      {
    	  boolean flag = false;
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
    		  if(flag == true)
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).succ.add(key);
    			  flag = false;
    			  break;
    		  }
    		  if(key.equals(n.toString()))
    			  flag = true;
    	  }
    	  proc.get(proc_name).stmt.get(n.toString()).def.add(n.f1.accept(this).toString());
    	  switch(n.f2.f0.which)
    	  {
    	  case 0:
    		  ArrayList<String> arr = (ArrayList<String>)n.f2.accept(this);
    		  Iterator<String> i = arr.iterator();
    		  while(i.hasNext())
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).use.add(i.next());
    		  }
    		  break;
    	  case 1:
    		  String temp = (String)n.f2.accept(this);
    		  if(temp != null)
    			  proc.get(proc_name).stmt.get(n.toString()).use.add(temp);
    		  break;
    	  case 2:
    		  ArrayList<String> array = (ArrayList<String>)n.f2.accept(this);
    		  Iterator<String> it = array.iterator();
    		  while(it.hasNext())
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).use.add(it.next());
    		  }
    		  break;
    	  case 3:
    		  String simpexp = n.f2.accept(this).toString();
    		  if(simpexp.startsWith("TEMP"))
    			  proc.get(proc_name).stmt.get(n.toString()).use.add(simpexp);
    		  break;
    	  }
      }
      if(no_of_parse == 2)
      {
    	  switch(n.f2.f0.which)
    	  {
    	  case 0:
    		  for(String key : proc.get(proc_name).temp_reg.keySet())
    		  {
    			  for(Live live : proc.get(proc_name).temp_reg.get(key).liveness)
    			  {
    				  int no = proc.get(proc_name).stmt.get(n.toString()).number;
    				  if(live.start < no && live.end > no)
    				  {
    					  live.iscallee = true;
    				  }
    			  }
    		  }
    	  }
      }
      if(no_of_parse == 3)
      {
    	  if(proc.get(proc_name).temp_reg.get(n.f1.accept(this)) == null)
    		  return null;
    	  int number = proc.get(proc_name).stmt.get(n.toString()).number;
    	  switch(n.f2.f0.which)
    	  {
    	  case 0:
    		  ArrayList<String> temps = (ArrayList<String>)n.f2.accept(this);
    		  int arg = temps.size()-1;
    		  for(int i = 0; (i < arg && arg <= 4) || (i < 4 && arg > 4); i++)
        	  {
        		  String temp = temps.get(i+1);
        		  int temp_index = Integer.parseInt(temp.substring(5));
        		  int proc_args = proc.get(proc_name).args;
        		  if(temp_index < proc_args)
        		  {
        			  if(temp_index < 4)
        				  System.out.println("MOVE a"+i+" s"+temp_index);
        			  else
        			  {
        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
        				  System.out.println("MOVE a"+i+" v1");
        			  }
        		  }
        		  else
        		  {
        			  TempDet tem = proc.get(proc_name).temp_reg.get(temp);
        			  for(Live live : tem.liveness)
        			  {
        				  if(number >= live.start && number <= live.end)
        				  {
        					  if(!live.register.contains("SPILL"))
        						  System.out.println("MOVE a"+i+" "+live.register);
        					  else
        					  {
        						  System.out.println("ALOAD v1 SPILLEDARG "+live.register.substring(6));
        						  System.out.println("MOVE a"+i+" v1");
        					  }
        				  }
        			  }
        		  }
        	  }
    		  for(int i = 4; i < arg; i++)
    		  {
    			  String temp = temps.get(i+1);
    			  int temp_index = Integer.parseInt(temp.substring(5));
        		  int proc_args = proc.get(proc_name).args;
        		  if(temp_index < proc_args)
        		  {
        			  if(temp_index < 4)
        				  System.out.println("PASSARG "+(i-3)+" s"+temp_index);
        			  else
        			  {
        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
        				  System.out.println("PASSARG "+(i-3)+" v1");
        			  }
        		  }
        		  else
        		  {
        			  TempDet tem = proc.get(proc_name).temp_reg.get(temp);
        			  for(Live live : tem.liveness)
        			  {
        				  if(number >= live.start && number <= live.end)
        				  {
        					  if(!live.register.contains("SPILL"))
        						  System.out.println("PASSARG "+(i-3)+" "+live.register);
        					  else
        					  {
        						  System.out.println("ALOAD v1 SPILLEDARG "+live.register.substring(6));
        						  System.out.println("PASSARG "+(i-3)+" v1");
        					  }
        				  }
        			  }
        		  }
    		  }
    		  if(temps.get(0).contains("TEMP")){
	    		  TempDet tem = proc.get(proc_name).temp_reg.get(temps.get(0));
	    		  for(Live live : tem.liveness)
				  {
					  if(number >= live.start && number <= live.end)
					  {
						  if(!live.register.contains("SPILL"))
							  System.out.println("CALL "+live.register);
						  else
						  {
							  System.out.println("ALOAD v1 SPILLEDARG "+live.register.substring(6));
							  System.out.println("CALL v1");
						  }
					  }
				  }
    		  }
    		  else
    			  System.out.println("CALL "+temps.get(0));
    		  TempDet tem = proc.get(proc_name).temp_reg.get(n.f1.accept(this));
    		  for(Live live : tem.liveness)
    		  {
    			  if(number >= live.start && number <= live.end)
    			  {
    				  if(!live.register.contains("SPILL"))
    					  System.out.println("MOVE "+live.register+" v0");
    				  else
    					  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    			  }
    		  }
    		  break;
    	  case 1:
    		  String simpexp = (String)n.f2.accept(this);
    		  tem = proc.get(proc_name).temp_reg.get(n.f1.accept(this));
    		  for(Live live : tem.liveness)
    		  {
    			  if(number >= live.start && number <= live.end)
    			  {
    				  if(!live.register.contains("SPILL"))
    				  {
    					  if(!simpexp.contains("TEMP"))
    						  System.out.println("MOVE "+live.register+" HALLOCATE "+simpexp);
    					  else
    					  {
    						  int temp_index = Integer.parseInt(simpexp.substring(5));
    		        		  int proc_args = proc.get(proc_name).args;
    		        		  if(temp_index < proc_args)
    		        		  {
    		        			  if(temp_index < 4)
    		        				  System.out.println("MOVE "+live.register+" HALLOCATE s"+temp_index);
    		        			  else
    		        			  {
    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    		        				  System.out.println("MOVE "+live.register+" HALLOCATE v1");
    		        			  }
    		        		  }
    		        		  else
    		        		  {
    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(simpexp);
    		        			  for(Live live1 : tem1.liveness)
    		        			  {
    		        				  if(number >= live1.start && number <= live1.end)
    		        				  {
    		        					  if(!live1.register.contains("SPILL"))
    		        						  System.out.println("MOVE "+live.register+" HALLOCATE "+live1.register);
    		        					  else
    		        					  {
    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    		        						  System.out.println("MOVE "+live.register+" HALLOCATE v1");
    		        					  }
    		        				  }
    		        			  }
    		        		  }
    					  }
    				  }
    				  else
    				  {
    					  if(!simpexp.contains("TEMP"))
    					  {
    						  System.out.println("MOVE v1 HALLOCATE "+simpexp);
    						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    					  }
    					  else
    					  {
    						  int temp_index = Integer.parseInt(simpexp.substring(5));
    		        		  int proc_args = proc.get(proc_name).args;
    		        		  if(temp_index < proc_args)
    		        		  {
    		        			  if(temp_index < 4)
    		        			  {
    		        				  System.out.println("MOVE v1 HALLOCATE s"+temp_index);
    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    		        			  }
    		        			  else
    		        			  {
    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    		        				  System.out.println("MOVE v0 HALLOCATE v1");
    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    		        			  }
    		        		  }
    		        		  else
    		        		  {
    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(simpexp);
    		        			  for(Live live1 : tem1.liveness)
    		        			  {
    		        				  if(number >= live1.start && number <= live1.end)
    		        				  {
    		        					  if(!live1.register.contains("SPILL"))
    		        					  {
    		        						  System.out.println("MOVE v1 HALLOCATE "+live1.register);
    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    		        					  }
    		        					  else
    		        					  {
    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    		        						  System.out.println("MOVE v0 HALLOCATE v1");
    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    		        					  }
    		        				  }
    		        			  }
    		        		  }
    					  }
    				  }
    			  }
    		  }
    		  break;
    	  case 2:
    		  ArrayList<String> arr = (ArrayList<String>)n.f2.accept(this);
    		  tem = proc.get(proc_name).temp_reg.get(n.f1.accept(this));
    		  String temp2 = arr.get(1);
    		  simpexp = arr.get(2);
    		  for(Live live : tem.liveness)
    		  {
//    			  System.out.println("liveness "+temp2);
//    			  System.out.println("start : "+live.start);
//    			  System.out.println("end : "+live.end);
//    			  System.out.println("number : "+number);
    			  if(number >= live.start && number <= live.end)
    			  {
//    				  System.out.println("live register : "+live.temp);
    				  if(!live.register.contains("SPILL"))
    				  {
//    					  System.out.println("simpleexp : "+simpexp);
    					  if(!simpexp.contains("TEMP"))
    					  {
    						  int temp_index = Integer.parseInt(temp2.substring(5));
    		        		  int proc_args = proc.get(proc_name).args;
    		        		  if(temp_index < proc_args)
    		        		  {
//    		        			  System.out.println("akjfaskj "+temp2);
    		        			  if(temp_index < 4)
    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" s"+temp_index+" "+simpexp);
    		        			  else
    		        			  {
    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v1 "+simpexp);
    		        			  }
    		        		  }
    		        		  else
    		        		  {
    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
//    		        			  System.out.println("akjfaskj "+temp2);
    		        			  for(Live live1 : tem1.liveness)
    		        			  {
    		        				  if(number >= live1.start && number <= live1.end)
    		        				  {
    		        					  if(!live1.register.contains("SPILL"))
    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" "+live1.register+" "+simpexp);
    		        					  else
    		        					  {
    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v1 "+simpexp);
    		        					  }
    		        				  }
    		        			  }
    		        		  }
    					  }
    					  else
    					  {
    						  int temp_index = Integer.parseInt(simpexp.substring(5));
    		        		  int proc_args = proc.get(proc_name).args;
    		        		  if(temp_index < proc_args)
    		        		  {
    		        			  if(temp_index < 4)
    		        			  {
    		        				  int temp1_index = Integer.parseInt(temp2.substring(5));
    	    		        		  int proc1_args = proc.get(proc_name).args;
    	    		        		  if(temp1_index < proc1_args)
    	    		        		  {
    	    		        			  if(temp1_index < 4)
    	    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" s"+temp1_index+" s"+temp_index);
    	    		        			  else
    	    		        			  {
    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp1_index - 4));
    	    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v1 s"+temp_index);
    	    		        			  }
    	    		        		  }
    	    		        		  else
    	    		        		  {
    	    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
    	    		        			  for(Live live1 : tem1.liveness)
    	    		        			  {
    	    		        				  if(number >= live1.start && number <= live1.end)
    	    		        				  {
    	    		        					  if(!live1.register.contains("SPILL"))
    	    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" "+live1.register+" s"+temp_index);
    	    		        					  else
    	    		        					  {
    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    	    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v1 s"+temp_index);
    	    		        					  }
    	    		        				  }
    	    		        			  }
    	    		        		  }
    		        			  }
    		        			  else
    		        			  {
    		        				  int temp1_index = Integer.parseInt(temp2.substring(5));
    	    		        		  int proc1_args = proc.get(proc_name).args;
    	    		        		  if(temp1_index < proc1_args)
    	    		        		  {
    	    		        			  if(temp1_index < 4)
    	    		        			  {
    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    	    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" s"+temp1_index+" v1");
    	    		        			  }
    	    		        			  else
    	    		        			  {
    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    	    		        				  System.out.println("ALOAD v0 SPILLEDARG "+(temp1_index - 4));
    	    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v0 v1");
    	    		        			  }
    	    		        		  }
    	    		        		  else
    	    		        		  {
    	    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
    	    		        			  for(Live live1 : tem1.liveness)
    	    		        			  {
    	    		        				  if(number >= live1.start && number <= live1.end)
    	    		        				  {
    	    		        					  if(!live1.register.contains("SPILL"))
    	    		        					  {
    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    	    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" "+live1.register+" v1");
    	    		        					  }
    	    		        					  else
    	    		        					  {
    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    	    		        						  System.out.println("ALOAD v0 SPILLEDARG "+live1.register.substring(6));
    	    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v0 v1");
    	    		        					  }
    	    		        				  }
    	    		        			  }
    	    		        		  }
    		        			  }
    		        		  }
    		        		  else
    		        		  {
    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(simpexp);
    		        			  for(Live live1 : tem1.liveness)
    		        			  {
    		        				  if(number >= live1.start && number <= live1.end)
    		        				  {
    		        					  if(!live1.register.contains("SPILL"))
    		        					  {
    		        						  int temp1_index = Integer.parseInt(temp2.substring(5));
    	    	    		        		  int proc1_args = proc.get(proc_name).args;
    	    	    		        		  if(temp1_index < proc1_args)
    	    	    		        		  {
    	    	    		        			  if(temp1_index < 4)
    	    	    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" s"+temp1_index+" "+live1.register);
    	    	    		        			  else
    	    	    		        			  {
    	    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp1_index - 4));
    	    	    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v1 "+live1.register);
    	    	    		        			  }
    	    	    		        		  }
    	    	    		        		  else
    	    	    		        		  {
    	    	    		        			  TempDet tem2 = proc.get(proc_name).temp_reg.get(temp2);
    	    	    		        			  for(Live live2 : tem2.liveness)
    	    	    		        			  {
    	    	    		        				  if(number >= live2.start && number <= live2.end)
    	    	    		        				  {
    	    	    		        					  if(!live2.register.contains("SPILL"))
    	    	    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" "+live2.register+" "+live1.register);
    	    	    		        					  else
    	    	    		        					  {
    	    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live2.register.substring(6));
    	    	    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v1 "+live1.register);
    	    	    		        					  }
    	    	    		        				  }
    	    	    		        			  }
    	    	    		        		  }
    		        					  }
    		        					  else
    		        					  {
    		        						  int temp1_index = Integer.parseInt(temp2.substring(5));
    	    	    		        		  int proc1_args = proc.get(proc_name).args;
    	    	    		        		  if(temp1_index < proc1_args)
    	    	    		        		  {
    	    	    		        			  if(temp1_index < 4)
    	    	    		        			  {
    	    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    	    	    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" s"+temp1_index+" v1");
    	    	    		        			  }
    	    	    		        			  else
    	    	    		        			  {
    	    	    		        				  System.out.println("ALOAD v0 SPILLEDARG "+live1.register.substring(6));
    	    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp1_index - 4));
    	    	    		        				  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v1 v0");
    	    	    		        			  }
    	    	    		        		  }
    	    	    		        		  else
    	    	    		        		  {
    	    	    		        			  TempDet tem2 = proc.get(proc_name).temp_reg.get(temp2);
    	    	    		        			  for(Live live2 : tem1.liveness)
    	    	    		        			  {
    	    	    		        				  if(number >= live2.start && number <= live2.end)
    	    	    		        				  {
    	    	    		        					  if(!live2.register.contains("SPILL"))
    	    	    		        					  {
    	    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    	    	    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" "+live2.register+" v1");
    	    	    		        					  }
    	    	    		        					  else
    	    	    		        					  {
    	    	    		        						  System.out.println("ALOAD v0 SPILLEDARG "+live1.register.substring(6));
    	    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live2.register.substring(6));
    	    	    		        						  System.out.println("MOVE "+live.register+" "+arr.get(0)+" v1 v0");
    	    	    		        					  }
    	    	    		        				  }
    	    	    		        			  }
    	    	    		        		  }
    		        					  }
    		        				  }
    		        			  }
    		        		  }
    					  }
    				  }
    				  else
    				  {
    					  if(!simpexp.contains("TEMP"))
    					  {
    						  int temp_index = Integer.parseInt(temp2.substring(5));
    		        		  int proc_args = proc.get(proc_name).args;
    		        		  if(temp_index < proc_args)
    		        		  {
    		        			  if(temp_index < 4)
    		        			  {
    		        				  System.out.println("MOVE v1 "+arr.get(0)+" s"+temp_index+" "+simpexp);
    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    		        			  }
    		        			  else
    		        			  {
    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    		        				  System.out.println("MOVE v0 "+arr.get(0)+" v1 "+simpexp);
    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    		        			  }
    		        		  }
    		        		  else
    		        		  {
    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
    		        			  for(Live live1 : tem1.liveness)
    		        			  {
    		        				  if(number >= live1.start && number <= live1.end)
    		        				  {
    		        					  if(!live1.register.contains("SPILL"))
    		        					  {
    		        						  System.out.println("MOVE v1 "+arr.get(0)+" "+live1.register+" "+simpexp);
    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    		        					  }
    		        					  else
    		        					  {
    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    		        						  System.out.println("MOVE v0 "+arr.get(0)+" v1 "+simpexp);
    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    		        					  }
    		        				  }
    		        			  }
    		        		  }
    					  }
    					  else
    					  {
    						  int temp_index = Integer.parseInt(simpexp.substring(5));
    		        		  int proc_args = proc.get(proc_name).args;
    		        		  if(temp_index < proc_args)
    		        		  {
    		        			  if(temp_index < 4)
    		        			  {
    		        				  int temp1_index = Integer.parseInt(temp2.substring(5));
    	    		        		  int proc1_args = proc.get(proc_name).args;
    	    		        		  if(temp1_index < proc1_args)
    	    		        		  {
    	    		        			  if(temp1_index < 4)
    	    		        			  {
    	    		        				  System.out.println("MOVE v1 "+arr.get(0)+" s"+temp1_index+" s"+temp_index);
    	    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    		        			  }
    	    		        			  else
    	    		        			  {
    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp1_index - 4));
    	    		        				  System.out.println("MOVE v0 "+arr.get(0)+" v1 s"+temp_index);
    	    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    		        			  }
    	    		        		  }
    	    		        		  else
    	    		        		  {
    	    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
    	    		        			  for(Live live1 : tem1.liveness)
    	    		        			  {
    	    		        				  if(number >= live1.start && number <= live1.end)
    	    		        				  {
    	    		        					  if(!live1.register.contains("SPILL"))
    	    		        					  {
    	    		        						  System.out.println("MOVE v1 "+arr.get(0)+" "+live1.register+" s"+temp_index);
    	    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    		        					  }
    	    		        					  else
    	    		        					  {
    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    	    		        						  System.out.println("MOVE v0 "+arr.get(0)+" v1 s"+temp_index);
    	    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    		        					  }
    	    		        				  }
    	    		        			  }
    	    		        		  }
    		        			  }
    		        			  else
    		        			  {
    		        				  int temp1_index = Integer.parseInt(temp2.substring(5));
    	    		        		  int proc1_args = proc.get(proc_name).args;
    	    		        		  if(temp1_index < proc1_args)
    	    		        		  {
    	    		        			  if(temp1_index < 4)
    	    		        			  {
    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    	    		        				  System.out.println("MOVE v0 "+arr.get(0)+" s"+temp1_index+" v1");
    	    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    		        			  }
    	    		        			  else
    	    		        			  {
    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    	    		        				  System.out.println("ALOAD v0 SPILLEDARG "+(temp1_index - 4));
    	    		        				  System.out.println("MOVE v1 "+arr.get(0)+" v0 v1");
    	    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    		        			  }
    	    		        		  }
    	    		        		  else
    	    		        		  {
    	    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(temp2);
    	    		        			  for(Live live1 : tem1.liveness)
    	    		        			  {
    	    		        				  if(number >= live1.start && number <= live1.end)
    	    		        				  {
    	    		        					  if(!live1.register.contains("SPILL"))
    	    		        					  {
    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    	    		        						  System.out.println("MOVE v0 "+arr.get(0)+" "+live1.register+" v1");
    	    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    		        					  }
    	    		        					  else
    	    		        					  {
    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    	    		        						  System.out.println("ALOAD v0 SPILLEDARG "+live1.register.substring(6));
    	    		        						  System.out.println("MOVE v1 "+arr.get(0)+" v0 v1");
    	    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    		        					  }
    	    		        				  }
    	    		        			  }
    	    		        		  }
    		        			  }
    		        		  }
    		        		  else
    		        		  {
    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(simpexp);
    		        			  for(Live live1 : tem1.liveness)
    		        			  {
    		        				  if(number >= live1.start && number <= live1.end)
    		        				  {
    		        					  if(!live1.register.contains("SPILL"))
    		        					  {
    		        						  int temp1_index = Integer.parseInt(temp2.substring(5));
    	    	    		        		  int proc1_args = proc.get(proc_name).args;
    	    	    		        		  if(temp1_index < proc1_args)
    	    	    		        		  {
    	    	    		        			  if(temp1_index < 4)
    	    	    		        			  {
    	    	    		        				  System.out.println("MOVE v1 "+arr.get(0)+" s"+temp1_index+" "+live1.register);
    	    	    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    	    		        			  }
    	    	    		        			  else
    	    	    		        			  {
    	    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp1_index - 4));
    	    	    		        				  System.out.println("MOVE v0 "+arr.get(0)+" v1 "+live1.register);
    	    	    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    	    		        			  }
    	    	    		        		  }
    	    	    		        		  else
    	    	    		        		  {
    	    	    		        			  TempDet tem2 = proc.get(proc_name).temp_reg.get(temp2);
    	    	    		        			  for(Live live2 : tem2.liveness)
    	    	    		        			  {
    	    	    		        				  if(number >= live2.start && number <= live2.end)
    	    	    		        				  {
    	    	    		        					  if(!live2.register.contains("SPILL"))
    	    	    		        					  {
    	    	    		        						  System.out.println("MOVE v1 "+arr.get(0)+" "+live2.register+" "+live1.register);
    	    	    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    	    		        					  }
    	    	    		        					  else
    	    	    		        					  {
    	    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live2.register.substring(6));
    	    	    		        						  System.out.println("MOVE v0 "+arr.get(0)+" v1 "+live1.register);
    	    	    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    	    		        					  }
    	    	    		        				  }
    	    	    		        			  }
    	    	    		        		  }
    		        					  }
    		        					  else
    		        					  {
    		        						  int temp1_index = Integer.parseInt(temp2.substring(5));
    	    	    		        		  int proc1_args = proc.get(proc_name).args;
    	    	    		        		  if(temp1_index < proc1_args)
    	    	    		        		  {
    	    	    		        			  if(temp1_index < 4)
    	    	    		        			  {
    	    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    	    	    		        				  System.out.println("MOVE v0 "+arr.get(0)+" s"+temp1_index+" v1");
    	    	    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    	    		        			  }
    	    	    		        			  else
    	    	    		        			  {
    	    	    		        				  System.out.println("ALOAD v0 SPILLEDARG "+live1.register.substring(6));
    	    	    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp1_index - 4));
    	    	    		        				  System.out.println("MOVE v1 "+arr.get(0)+" v1 v0");
    	    	    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    	    		        			  }
    	    	    		        		  }
    	    	    		        		  else
    	    	    		        		  {
    	    	    		        			  TempDet tem2 = proc.get(proc_name).temp_reg.get(temp2);
    	    	    		        			  for(Live live2 : tem1.liveness)
    	    	    		        			  {
    	    	    		        				  if(number >= live2.start && number <= live2.end)
    	    	    		        				  {
    	    	    		        					  if(!live2.register.contains("SPILL"))
    	    	    		        					  {
    	    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    	    	    		        						  System.out.println("MOVE v0 "+arr.get(0)+" "+live2.register+" v1");
    	    	    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v0");
    	    	    		        					  }
    	    	    		        					  else
    	    	    		        					  {
    	    	    		        						  System.out.println("ALOAD v0 SPILLEDARG "+live1.register.substring(6));
    	    	    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live2.register.substring(6));
    	    	    		        						  System.out.println("MOVE v1 "+arr.get(0)+" v1 v0");
    	    	    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    	    	    		        					  }
    	    	    		        				  }
    	    	    		        			  }
    	    	    		        		  }
    		        					  }
    		        				  }
    		        			  }
    		        		  }
    					  }
    				  }
    			  }
    		  }
    		  break;
    	  case 3:
    		  simpexp = (String)n.f2.accept(this);
//    		  System.out.println(n.f1.accept(this));
    		  tem = proc.get(proc_name).temp_reg.get(n.f1.accept(this));
    		  for(Live live : tem.liveness)
    		  {
    			  if(number >= live.start && number <= live.end)
    			  {
    				  if(!live.register.contains("SPILL"))
    				  {
    					  if(!simpexp.contains("TEMP"))
    						  System.out.println("MOVE "+live.register+" "+simpexp);
    					  else
    					  {
    						  int temp_index = Integer.parseInt(simpexp.substring(5));
    		        		  int proc_args = proc.get(proc_name).args;
    		        		  if(temp_index < proc_args)
    		        		  {
    		        			  if(temp_index < 4)
    		        				  System.out.println("MOVE "+live.register+" s"+temp_index);
    		        			  else
    		        			  {
    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    		        				  System.out.println("MOVE "+live.register+" v1");
    		        			  }
    		        		  }
    		        		  else
    		        		  {
    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(simpexp);
    		        			  for(Live live1 : tem1.liveness)
    		        			  {
    		        				  if(number >= live1.start && number <= live1.end)
    		        				  {
    		        					  if(!live1.register.contains("SPILL"))
    		        						  System.out.println("MOVE "+live.register+" "+live1.register);
    		        					  else
    		        					  {
    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    		        						  System.out.println("MOVE "+live.register+" v1");
    		        					  }
    		        				  }
    		        			  }
    		        		  }
    					  }
    				  }
    				  else
    				  {
    					  if(!simpexp.contains("TEMP"))
    					  {
    						  System.out.println("MOVE v1 "+simpexp);
    						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    					  }
    					  else
    					  {
    						  int temp_index = Integer.parseInt(simpexp.substring(5));
    		        		  int proc_args = proc.get(proc_name).args;
    		        		  if(temp_index < proc_args)
    		        		  {
    		        			  if(temp_index < 4)
    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" s"+temp_index);
    		        			  else
    		        			  {
    		        				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index - 4));
    		        				  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    		        			  }
    		        		  }
    		        		  else
    		        		  {
    		        			  TempDet tem1 = proc.get(proc_name).temp_reg.get(simpexp);
    		        			  for(Live live1 : tem1.liveness)
    		        			  {
    		        				  if(number >= live1.start && number <= live1.end)
    		        				  {
    		        					  if(!live1.register.contains("SPILL"))
    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" "+live1.register);
    		        					  else
    		        					  {
    		        						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    		        						  System.out.println("ASTORE SPILLEDARG "+live.register.substring(6)+" v1");
    		        					  }
    		        				  }
    		        			  }
    		        		  }
    					  }
    				  }
    			  }
    		  }
    		  break;
    	  }
      }
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  if(islabel)
    		  labelindicate.put(lab, n.toString());
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put(n.toString(), st);
      }
      if(no_of_parse == 1)
      {
    	  boolean flag = false;
    	  for(String key : proc.get(proc_name).stmt.keySet())
    	  {
    		  if(flag == true)
    		  {
    			  proc.get(proc_name).stmt.get(n.toString()).succ.add(key);
    			  flag = false;
    			  break;
    		  }
    		  if(key.equals(n.toString()))
    			  flag = true;
    	  }
    	  String simpexp = (String)n.f1.accept(this);
    	  if(simpexp.startsWith("TEMP"))
    	  {
    		  proc.get(proc_name).stmt.get(n.toString()).use.add(simpexp);
    	  }
      }
      if(no_of_parse == 3)
      {
    	  int number = proc.get(proc_name).stmt.get(n.toString()).number;
    	  String simpexp = (String)n.f1.accept(this);
    	  if(!simpexp.contains("TEMP"))
    	  {
    		  System.out.println("PRINT "+simpexp);
    	  }
    	  else
    	  {
    		  int temp_index = Integer.parseInt(simpexp.substring(5));
    		  int proc_args = proc.get(proc_name).args;
    		  if(temp_index < proc_args)
    		  {
    			  if(temp_index < 4)
    				  System.out.println("PRINT s"+temp_index);
    			  else
    			  {
    				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index-4));
    				  System.out.println("PRINT v1");
    			  }
    		  }
    		  else
    		  {
    			  TempDet tem1 = proc.get(proc_name).temp_reg.get(simpexp);
    			  for(Live live1 : tem1.liveness)
    			  {
    				  if(number >= live1.start && number <= live1.end)
    				  {
    					  if(!live1.register.contains("SPILL"))
    						  System.out.println("PRINT "+live1.register);
    					  else
    					  {
    						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    						  System.out.println("PRINT v1");
    					  }
    				  }
    			  }
    		  }
    	  }
      }
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      return n.f0.accept(this);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
    	  n.f1.accept(this);
    	  if(islabel)
    		  labelindicate.put(lab, n.toString());
    	  StmtDet st = new StmtDet();
    	  st.number = index++;
    	  proc.get(proc_name).stmt.put("RETURN", st);
      }
      if(no_of_parse == 1)
      {
    	  n.f1.accept(this);
    	  String simpexp = (String)n.f3.accept(this);
    	  if(simpexp.startsWith("TEMP"))
    	  {
    		  proc.get(proc_name).stmt.get("RETURN").use.add(simpexp);
    	  }
      }
      if(no_of_parse == 2)
      {
    	  n.f1.accept(this);
      }
      if(no_of_parse == 3)
      {
    	  int no_of_spills = 0;
    	  for(TempDet tem : proc.get(proc_name).temp_reg.values())
    	  {
    		  for(Live live : tem.liveness)
    		  {
    			  if(live.register.contains("SPILL"))
    				  no_of_spills++;
    		  }
    	  }
    	  int args = proc.get(proc_name).args;
    	  int sregs;
    	  if(args <=4 )
    		  sregs = proc.get(proc_name).stack-no_of_spills;
    	  else
    		  sregs = proc.get(proc_name).stack-no_of_spills-(args-4);
    	  for(int i = 0;i < sregs; i++)
    	  {
    		  if(args <= 4)
    			  System.out.println("ASTORE SPILLEDARG "+i+" s"+i);
    		  else
    			  System.out.println("ASTORE SPILLEDARG "+(i-4+args)+" s"+i);
    	  }
    	  for(int i = 0;(i < args && args <= 4) || (i < 4 && args > 4);i++)
    	  {
    		  System.out.println("MOVE s"+i+" a"+i);
    	  }
    	  n.f1.accept(this);
    	  String simpexp = (String)n.f3.accept(this);
    	  int number = proc.get(proc_name).stmt.get("RETURN").number;
    	  if(!simpexp.contains("TEMP"))
    	  {
    		  System.out.println("MOVE v0 "+simpexp);
    	  }
    	  else
    	  {
    		  int temp_index = Integer.parseInt(simpexp.substring(5));
    		  int proc_args = proc.get(proc_name).args;
    		  if(temp_index < proc_args)
    		  {
    			  if(temp_index < 4)
    				  System.out.println("MOVE v0 s"+temp_index);
    			  else
    			  {
    				  System.out.println("ALOAD v1 SPILLEDARG "+(temp_index-4));
    				  System.out.println("MOVE v0 v1");
    			  }
    		  }
    		  else
    		  {
    			  TempDet tem1 = proc.get(proc_name).temp_reg.get(simpexp);
    			  for(Live live1 : tem1.liveness)
    			  {
    				  if(number >= live1.start && number <= live1.end)
    				  {
    					  if(!live1.register.contains("SPILL"))
    						  System.out.println("MOVE v0 "+live1.register);
    					  else
    					  {
    						  System.out.println("ALOAD v1 SPILLEDARG "+live1.register.substring(6));
    						  System.out.println("MOVE v0 v1");
    					  }
    				  }
    			  }
    		  }
    	  }
    	  for(int i = 0;i < sregs; i++)
    	  {
    		  if(args <= 4)
    			  System.out.println("ALOAD s"+i+" SPILLEDARG "+i);
    		  else
    			  System.out.println("ALOAD s"+i+" SPILLEDARG "+(i-4+args));
    	  }
      }
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      if(no_of_parse == 1)
      {
    	  ArrayList<String> arr = new ArrayList<String>();
    	  int arg = n.f3.size();
    	  if(arg > proc.get(proc_name).max_args)
    		  proc.get(proc_name).max_args = arg;
//    	  System.out.println(arg);
	      String simpexp = (String)n.f1.accept(this);
	      if(simpexp.startsWith("TEMP"))
	    	  arr.add(simpexp);
	      for ( Enumeration<Node> e = n.f3.elements(); e.hasMoreElements(); ) {
              String temp = (String)e.nextElement().accept(this);
              arr.add(temp);
	      }
	      return (R)arr;
      }
      if(no_of_parse == 3)
      {
    	  ArrayList<String> temps = new ArrayList<String>();
    	  temps.add(n.f1.accept(this).toString());
    	  for ( Enumeration<Node> e = n.f3.elements(); e.hasMoreElements(); ) {
              String temp = (String)e.nextElement().accept(this);
              temps.add(temp);
	      }
    	  return (R)temps;
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      if(no_of_parse == 1 )
      {
    	  String simpexp = (String)n.f1.accept(this);
    	  if(simpexp.startsWith("TEMP"))
    		  return (R)simpexp;
      }
      if(no_of_parse == 3)
      {
    	  return n.f1.accept(this);
      }
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      if(no_of_parse == 1)
      {
    	  ArrayList<String> arr = new ArrayList<String>();
    	  String temp = n.f1.accept(this).toString();
    	  arr.add(temp);
    	  String simpexp = (String)n.f2.accept(this);
    	  if(simpexp.startsWith("TEMP"))
    		  arr.add(simpexp);
    	  return (R)arr;
      }
      if(no_of_parse == 3)
      {
    	  ArrayList<String> list = new ArrayList<String>();
    	  list.add(n.f0.accept(this).toString());
    	  list.add(n.f1.accept(this).toString());
    	  list.add(n.f2.accept(this).toString());
    	  return (R)list;
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
	   return (R)n.f0.choice.toString();
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      return n.f0.accept(this);
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
//	   System.out.println(("TEMP "+n.f1.accept(this).toString()));
	   return (R)("TEMP "+n.f1.accept(this).toString());
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
	   return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
	   islabel = true;
	   lab = n.f0.toString();
//	   System.out.println(lab);
	   return (R)n.f0.toString();
   }

}
