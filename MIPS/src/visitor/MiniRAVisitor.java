//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MiniRAVisitor<R> implements GJNoArguVisitor<R> {
	
	boolean islabel = true;
	String simp = "";
	int arg1,arg2,arg3;
	String lab;
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> VariablePackingInfo()
    * f14 -> <EOF>
    */
   public R visit(Goal n) {
      arg1 = Integer.parseInt(n.f2.accept(this).toString());
      arg2 = Integer.parseInt(n.f5.accept(this).toString());
      arg3 = Integer.parseInt(n.f8.accept(this).toString());
      System.out.println("\t.text");
      System.out.println("\t.globl\tmain");
      System.out.println("main:");
      System.out.println("move $fp, $sp");
      if(arg3 > 4)
    	  System.out.println("subu $sp, $sp, "+4*((arg3-4)+arg2+1));
      else
    	  System.out.println("subu $sp, $sp, "+4*(arg2+1));
      System.out.println("sw $ra, -4($fp)");
      islabel = false;
      n.f10.accept(this);
      System.out.println("lw $ra, -4($fp)");
      if(arg3 > 4)
    	  System.out.println("addu $sp, $sp, "+4*((arg3-4)+arg2+1));
      else
    	  System.out.println("addu $sp, $sp, "+4*(arg2+1));
      System.out.println("j $ra");
      n.f12.accept(this);
      System.out.println("\t.text\n\t.globl\t_halloc\n_halloc:");
      System.out.println("\tli $v0, 9");
      System.out.println("\tsyscall\n\tj $ra");
      System.out.println("\t.text\n\t.globl\t_print\n_print:");
      System.out.println("\tli $v0, 1");
      System.out.println("\tsyscall");
      System.out.println("\tla $a0, newl");
      System.out.println("\tli $v0, 4");
      System.out.println("\tsyscall\n\tj $ra");
      System.out.print("\t.data\n\t.align\t0\nnewl:");
      System.out.println("\t.asciiz \"\\n\"");
      System.out.print("\t.data\n\t.align\t0\nstr_er:");
      System.out.println("\t.asciiz \"ERROR: abnormal termination\\n\"");
      return null;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n) {
      R _ret=null;
      String label = (String)n.f0.accept(this);
      arg1 = Integer.parseInt(n.f2.accept(this).toString());
      arg2 = Integer.parseInt(n.f5.accept(this).toString());
      arg3 = Integer.parseInt(n.f8.accept(this).toString());
      System.out.println("\t.text");
      System.out.println("\t.globl\t"+label);
      System.out.println(label+":");
      System.out.println("sw $fp, -8($sp)");
      System.out.println("move $fp, $sp");
      if(arg3 > 4)
    	  System.out.println("subu $sp, $sp, "+4*((arg3-4)+arg2+2));
      else
    	  System.out.println("subu $sp, $sp, "+4*(arg2+2));
      System.out.println("sw $ra, -4($fp)");
      islabel = false;
      n.f10.accept(this);
      System.out.println("lw $ra, -4($fp)");
      if(arg3 > 4)
      {
    	  System.out.println("lw $fp, "+4*((arg3-4)+arg2)+"($sp)");
    	  System.out.println("addu $sp, $sp, "+4*((arg3-4)+arg2+2));
      }
      else
      {
    	  System.out.println("lw $fp, "+4*(arg2)+"($sp)");
    	  System.out.println("addu $sp, $sp, "+4*(arg2+2));
      }
      System.out.println("j $ra");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      if(islabel)
    	  System.out.print(lab+": ");
      n.f0.accept(this);
      islabel = false;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      System.out.println("li $v0, 4\nla $a0, str_er\nsyscall\nli $v0, 10\nsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      String reg = (String)n.f1.accept(this);
      String label = (String)n.f2.accept(this);
      System.out.println("beqz $"+reg+" "+label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      String label = (String)n.f1.accept(this);
      System.out.println("b "+label);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      String reg1 = (String)n.f1.accept(this);
      int integer = Integer.parseInt(n.f2.accept(this).toString());
      String reg2 = (String)n.f3.accept(this);
      System.out.println("sw $"+reg2+", "+integer+"($"+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      String reg1 = (String)n.f1.accept(this);
      String reg2 = (String)n.f2.accept(this);
      int integer = Integer.parseInt(n.f3.accept(this).toString());
      System.out.println("lw $"+reg1+", "+integer+"($"+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      String reg = (String)n.f1.accept(this);
      switch(n.f2.f0.which)
      {
      case 0:
    	  n.f2.accept(this);
    	  System.out.println("move $"+reg+" $v0");
    	  break;
      case 2:
    	  simp = "MOVE "+reg;
    	  n.f2.accept(this);
    	  break;
      case 1:
    	  simp = "BINOP "+reg;
    	  n.f2.accept(this);
    	  break;
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      String simpexp = (String)n.f1.accept(this);
      switch(n.f1.f0.which)
      {
      case 0:
    	  System.out.println("move $a0 "+n.f1.accept(this));
    	  System.out.println("jal _print");
    	  break;
      case 1:
      case 2:
    	  System.out.println("move $a0 "+n.f1.accept(this));
    	  System.out.println("jal _print");
    	  break;
      }
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      String reg = (String)n.f1.accept(this);
      int spill = Integer.parseInt(n.f2.accept(this).toString());
      if(arg1 > 4 && spill < arg1)
    	  System.out.println("lw $"+reg+", "+(4*spill)+"($fp)");
      else if(arg3 <= 4)
    	  System.out.println("lw $"+reg+", "+(4*spill)+"($sp)");
      else
    	  System.out.println("lw $"+reg+", "+(4*(spill+arg3-4))+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      int spill = Integer.parseInt(n.f1.accept(this).toString());
      String reg = (String)n.f2.accept(this);
      if(arg3 <= 4)
    	  System.out.println("sw $"+reg+", "+(4*spill)+"($sp)");
      else
    	  System.out.println("sw $"+reg+", "+(4*(spill+arg3-4))+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      int integer = Integer.parseInt(n.f1.accept(this).toString());
      String reg = (String)n.f2.accept(this);
      System.out.println("sw $"+reg+", "+4*(integer-1)+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      System.out.println("jalr "+n.f1.accept(this));
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      String simpexp = (String)n.f1.accept(this);
      if(simpexp.contains("$"))
    	  System.out.println("move $a0 "+simpexp);
      else
    	  System.out.println("li $a0 "+simpexp);
      System.out.println("jal _halloc");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String op = (String)n.f0.accept(this);
      String reg = (String)n.f1.accept(this);
      String simpexp = (String)n.f2.accept(this);
      if(simp.contains("BINOP"))
      {
	      if(op.contains("LT"))
	    	  System.out.println("slt $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      else if(op.contains("PLUS"))
	    	  System.out.println("add $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      else if(op.contains("MINUS"))
	    	  System.out.println("sub $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      else if(op.contains("TIMES"))
	    	  System.out.println("mul $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      else if(op.contains("BITOR"))
	    	  System.out.println("or $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      else if(op.contains("BITAND"))
	    	  System.out.println("and $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      else if(op.contains("BITXOR"))
	    	  System.out.println("xor $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      else if(op.contains("LSHIFT"))
	    	  System.out.println("sll $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      else if(op.contains("RSHIFT"))
	    	  System.out.println("srl $"+simp.substring(6)+", $"+reg+", "+simpexp);
	      simp = "";
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "BITOR"
    *       | "BITAND"
    *       | "LSHIFT"
    *       | "RSHIFT"
    *       | "BITXOR"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.choice.toString();
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return (R)n.f1.f0.toString();
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      String choice = (String)n.f0.accept(this);
      if(simp.contains("MOVE"))
      {
    	  switch(n.f0.which)
    	  {
    	  case 0:
    		  System.out.println("move $"+simp.substring(5)+" $"+choice);
    		  break;
    	  case 1:
    		  System.out.println("li $"+simp.substring(5)+" "+choice);
    		  break;
    	  case 2:
    		  System.out.println("la $"+simp.substring(5)+" "+choice);
    		  break;
    	  }
    	  simp = "";
      }
      if(n.f0.which == 0)
		  return (R)("$"+n.f0.accept(this).toString());
      return (R)n.f0.accept(this);
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.choice.toString();
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      islabel = true;
      lab = n.f0.toString();
      n.f0.accept(this);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> "// Number of  vars after packing ="
    * f1 -> IntegerLiteral()
    * f2 -> "; Number of Spilled vars ="
    * f3 -> IntegerLiteral()
    */
   public R visit(VariablePackingInfo n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

}
