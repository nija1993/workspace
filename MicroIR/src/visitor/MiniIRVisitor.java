//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MiniIRVisitor<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	int temp_no = 800;
	boolean expstar = false;
	boolean stmtexp = false;
	boolean func = false;
	ArrayList<String> arguments = new ArrayList<String>();
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
//       	  if(expstar)
//       	  {
//       		  System.out.println("entering");
//       		  arguments.add(e.nextElement().accept(this).toString());
//       	  }
//       	  else
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() ) 
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
    		  e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      System.out.println("MAIN");
      n.f1.accept(this);
      System.out.println("END");
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      System.out.print(n.f0.f0.toString());
      System.out.print("[");
      System.out.print(n.f2.f0.toString());
      System.out.println("]");
      stmtexp = true;
      n.f4.accept(this);
      stmtexp = false;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      String exp = (String)n.f1.accept(this);
      String lab = n.f2.f0.toString();
      System.out.println("CJUMP "+exp+" "+lab);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      String lab = n.f1.f0.toString();
      System.out.println("JUMP "+lab);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      String exp1 = (String)n.f1.accept(this);
      String in = n.f2.f0.toString();
      func = true;
      String exp2 = (String)n.f3.accept(this);
      func = false;
      System.out.println("HSTORE "+exp1+" "+in+" "+exp2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      String tmp = (String)n.f1.accept(this);
      String exp = (String)n.f2.accept(this);
      String in = n.f3.f0.toString();
      System.out.println("HLOAD "+tmp+" "+exp+" "+in);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;      
      String tmp = (String)n.f1.accept(this);
      String exp = (String)n.f2.accept(this);
      System.out.println("MOVE "+tmp+" "+exp);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      String exp = (String)n.f1.accept(this);
      System.out.println("PRINT "+exp);
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n) {
      R _ret=null;
      return n.f0.accept(this);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      String exp = (String)n.f3.accept(this);
      if(stmtexp)
      {
    	  stmtexp = false;
	      System.out.println("BEGIN");
	      n.f1.accept(this);
	      System.out.println("RETURN "+exp);
	      System.out.println("END");
	      return _ret;
      }
      else
      {
    	  n.f1.accept(this);
      }
      return (R)exp;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      String exp1 = (String)n.f1.accept(this);
      String tmp = "TEMP "+Integer.toString(temp_no++);
      boolean flag = false;
      ArrayList<String> arg = new ArrayList<String>();
      if(expstar)
      {
    	  flag = true;
    	  Iterator<String> i = arguments.iterator();
    	  while(i.hasNext())
    	  {
    		  arg.add(i.next());
    	  }
//    	  System.out.println("array size : "+arg.size());
    	  arguments.clear();
//    	  System.out.println("array size : "+arg.size());
      }
      expstar = true;
      for ( Enumeration<Node> e = n.f3.elements(); e.hasMoreElements(); ) {
//       		  System.out.println("entering");
       		  arguments.add(e.nextElement().accept(this).toString());
         }
      expstar = false;
      System.out.print("MOVE "+tmp+" CALL "+exp1+"(");
      Iterator<String> i = arguments.iterator();
      while(i.hasNext())
      {
    	  System.out.print(i.next()+" ");
      }
      arguments.clear();
      System.out.println(")");
      if(flag)
      {
    	  Iterator<String> it = arg.iterator();
    	  while(it.hasNext())
    	  {
    		  arguments.add(it.next());
    	  }
//    	  System.out.println("array size : "+arg.size());
//    	  System.out.println("array size : "+arguments.size());
    	  expstar = true;
      }
      return (R)tmp;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      String exp = (String)n.f1.accept(this);
      return (R)("HALLOCATE "+exp);
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String op = (String)n.f0.accept(this);
      func = true;
      String exp1 = (String)n.f1.accept(this);
      func = false;
      String exp2 = (String)n.f2.accept(this);
      String tmp = "TEMP "+Integer.toString(temp_no++);
      System.out.print("MOVE "+tmp+" "+op+" ");
      System.out.println(exp1+" "+exp2);
      return (R)tmp;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      return (R)n.f0.choice.toString();
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      String in = (String)n.f1.f0.toString();
      return (R)("TEMP "+in);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      if(expstar || func)
      {
	      String tmp = "TEMP "+Integer.toString(temp_no++);
	      System.out.println("MOVE "+tmp+" "+n.f0.toString());
	      return (R)tmp;
      }
      else
    	  return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      if(func)
      {
    	  String tmp = "TEMP "+Integer.toString(temp_no++);
    	  System.out.println("MOVE "+tmp+" "+n.f0.toString());
    	  return (R)tmp;
      }
      if(n.f0.toString().startsWith("L"))
    	  System.out.print(n.f0.toString() + " ");
      return (R)n.f0.toString();
   }

}
