//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class TypeCheck<R> implements GJNoArguVisitor<R> {
   
	// TA CODE:
	public class VarDecl{
		String type;
		String name;
		VarDecl(String type,String name){
			this.name = name;
			this.type = type;
		}
	}
	public class MethodDet{
		HashMap<String,String> vardecl_method = new HashMap<String,String>();
		ArrayList<VarDecl> parameters = new ArrayList<VarDecl>();
		String return_type;
	}	
	public class ClassDet{
		HashMap<String,String> vardecl_class = new HashMap<String,String>();
		HashMap<String,MethodDet> methoddet = new HashMap<String,MethodDet>();
	}
	private String class_name = "";
	private String meth_name = "";
	private String class_extend;
	HashMap<String,ClassDet> classdet = new HashMap<String,ClassDet>();
	HashMap<String,String> extending = new HashMap<String,String>();
	HashMap<String,Integer> flag = new HashMap<String,Integer>();
	Stack<String> classes =  new Stack<String>();
	public int no_of_parse = 0;
	public TypeCheck(int arg){
		no_of_parse = arg;
	}
	Stack<String> func = new Stack<String>();
	private int id_flag = 0;
	private int exp_list = 0;
	private String pe,meth;
	

//
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
//      n.f0.accept(this);
//      n.f1.accept(this);
//      n.f2.accept(this);
//      n.f3.accept(this);
//      n.f4.accept(this);
//      n.f5.accept(this);
//      n.f6.accept(this);
//      n.f7.accept(this);
//      n.f8.accept(this);
//      n.f9.accept(this);
//      n.f10.accept(this);
//      n.f12.accept(this);
//      n.f13.accept(this);
      n.f14.accept(this);
//      n.f15.accept(this);
//      n.f16.accept(this);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      
      //TA CODE:
      class_name = n.f1.f0.toString();
//      System.out.println(class_name);
      meth_name = "";
      class_extend = "";
      if(no_of_parse == 0)
      {
    	  if(classdet.get(class_name) == null)
    	  {
    		  ClassDet c = new ClassDet();
    		  classdet.put(class_name, c);
    		  flag.put(class_name, 0);
    	  }
    	  else
    	  {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
      }
      else if(no_of_parse == 1)
    	  flag.put(class_name, 1);
      		
    	  /* Note that type of VarDeclaration(i.e. f3 here) in class ClassDeclaration(see file syntaxtree/ClassDeclaration.java)
    	   * is NodeListOptional. And in class NodeListOptional(see file syntaxtree/NodeListOptional) method 'present' returns
    	   * true if there is any node, otherwise false. 
    	   *  
    	   */
      //if(!n.f3.present())
    	//  System.out.println(class_name+" has no fields.");
      
      
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;  
      
      //TA CODE:
      class_name=n.f1.f0.toString();
      meth_name="";
      class_extend = n.f3.f0.toString();
//      System.out.println(class_name);
      if(no_of_parse == 0)
      {
    	  if(classdet.get(class_name) != null)
    	  {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
    	  ClassDet c = new ClassDet();
    	  classdet.put(class_name, c);
    	  extending.put(class_name, class_extend);
    	  flag.put(class_name, 0);
      }
      else if(no_of_parse == 1)
      {
    	  if(classdet.get(class_extend) == null)
    	  {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
    	  classes.push(class_name);
    	  classes.push(class_extend);
    	  while(extending.get(class_extend) != null && flag.get(class_extend) == 0)
    	  {
    		  classes.push(extending.get(class_extend));
    		  class_extend = extending.get(class_extend);
    	  }
    	  class_extend = classes.pop();    	  
    	  while(!classes.empty())
    	  {
    		  class_name = classes.pop();
//    		  System.out.println("entering");
    		  for(String key : classdet.get(class_extend).vardecl_class.keySet())
    		  {
    			  if(!classdet.get(class_name).vardecl_class.containsKey(key))
    			  {
    				  classdet.get(class_name).vardecl_class.put(key, classdet.get(class_extend).vardecl_class.get(key));
//    				  System.out.println("entered");
    			  }
    		  }
    		  for(String key : classdet.get(class_extend).methoddet.keySet())
        	  {
        		  if(!classdet.get(class_name).methoddet.containsKey(key))
        		  {
        			  classdet.get(class_name).methoddet.put(key, classdet.get(class_extend).methoddet.get(key));
//        			  System.out.println("entered func");
        		  }
        	  }
    		  flag.put(class_name, 1);
    		  class_extend = class_name;
    	  }
//    	  System.out.println("exit");
    	  class_name=n.f1.f0.toString();
          class_extend = n.f3.f0.toString();
      }
      //if(!n.f5.present())
    	//  System.out.println(class_name+" has no fields.");
      
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      id_flag = 0;
      String type = (String)n.f0.accept(this);
      String id = (String)n.f1.accept(this);
      //TA CODE:
      if(no_of_parse == 0)
      {
	      if(meth_name.equals(""))
	      {
	    	  //System.out.println("Class "+class_name+" has field of Type: "+n.f0.accept(this)+", Name: "+n.f1.f0.toString());
	    	  if(classdet.get(class_name).vardecl_class.get(id) != null)
	    	  {
	    		  System.out.println("Type error");
	    		  System.exit(0);
	    	  }
	    	  classdet.get(class_name).vardecl_class.put(id, type);
	      }
	      else
	      {
	    	  //System.out.println("method "+meth_name+" of class "+class_name+" has local var of Type: "+n.f0.accept(this)+", Name: "+n.f1.f0.toString());
	    	  if(classdet.get(class_name).methoddet.get(meth_name).vardecl_method.get(id) != null)
	    	  {
	    		  System.out.println("Type error");
	    		  System.exit(0);
	    	  }
	    	  int i = 0;
	    	  VarDecl v;
	    	  while(i < classdet.get(class_name).methoddet.get(meth_name).parameters.size())
	    	  {
	    		  v = classdet.get(class_name).methoddet.get(meth_name).parameters.get(i++);
	    		  if(v.name.equals(id))
	    		  {
	    			  System.out.println("Type error");
	    			  System.exit(0);
	    		  }
	    	  }
	    	  classdet.get(class_name).methoddet.get(meth_name).vardecl_method.put(id, type);
	      }
      }
      else if(no_of_parse == 2)
      {
    	  boolean flag = true;
    	  if(!type.equals("int") && !type.equals("int[]") && !type.equals("boolean"))
    	  {
    		  for(String key : classdet.keySet())
    		  {
    			  if(type.equals(key))
    				  flag = false;
    		  }
    		  if(flag)
    		  {
    			  System.out.println("Type error");
    			  System.exit(0);
    		  }
    	  }
      }
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      
    //TA CODE:
      meth_name=n.f2.f0.toString();
      //if(!n.f7.present())
    	  //System.out.println("Method "+n.f2.f0.toString()+" of class "+class_name+" has no local variables.");
      if(no_of_parse == 0)
      {
    	  if(classdet.get(class_name).methoddet.get(meth_name) != null)
    	  {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
	      MethodDet m = new MethodDet();
	      m.return_type = (String)n.f1.accept(this);
	      classdet.get(class_name).methoddet.put(meth_name, m);
      }
      else if(no_of_parse == 2)
      {
    	  if(!class_extend.equals(""))
    	  {
    		  if(classdet.get(class_extend).methoddet.containsKey(meth_name))
    		  {
    			  //System.out.println(classdet.get(class_extend).methoddet.get(meth_name).return_type);
    			  //System.out.println(classdet.get(class_name).methoddet.get(meth_name).return_type);
    			  if(!classdet.get(class_extend).methoddet.get(meth_name).return_type.equals(classdet.get(class_name).methoddet.get(meth_name).return_type))
    			  {
    				  System.out.println("Type error");
    				  System.exit(0);
    			  }
    			  int i;
    			  for(i = 0 ; i < classdet.get(class_extend).methoddet.get(meth_name).parameters.size(); i++)
    			  {
    				  if(i < classdet.get(class_name).methoddet.get(meth_name).parameters.size())
    				  {
    					  if(!classdet.get(class_extend).methoddet.get(meth_name).parameters.get(i).type.equals(classdet.get(class_name).methoddet.get(meth_name).parameters.get(i).type))
    					  {
    						  System.out.println("Type error");
    						  System.exit(0);
    					  }
    				  }
    				  else
    				  {
    					  System.out.println("Type error");
						  System.exit(0);
    				  }
    			  }
    			  if(i < classdet.get(class_name).methoddet.get(meth_name).parameters.size())
    			  {
    				  System.out.println("Type error");
					  System.exit(0);
    			  }
    		  }
    	  }
    	  Map<String,String> temp = new HashMap(classdet.get(class_name).vardecl_class);
    	  temp.keySet().removeAll(classdet.get(class_name).methoddet.get(meth_name).vardecl_method.keySet());
    	  classdet.get(class_name).methoddet.get(meth_name).vardecl_method.putAll(temp);
      }
     
      n.f4.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f10.accept(this);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      if(no_of_parse == 0)
      {
	      String type = (String)n.f0.accept(this);
//	      System.out.println(type);
	      String id = n.f1.f0.toString();
	      VarDecl var = new VarDecl(type,id);
	      int i = 0;
	      VarDecl v;
	      while(i < classdet.get(class_name).methoddet.get(meth_name).parameters.size())
	      {
	    	  v = classdet.get(class_name).methoddet.get(meth_name).parameters.get(i++);
	    	  if(v.name.equals(var.name))
	    	  {
		    	  System.out.println("Type error");
		    	  System.exit(0);
	    	  }
	      }
	      classdet.get(class_name).methoddet.get(meth_name).parameters.add(var);
	      classdet.get(class_name).methoddet.get(meth_name).vardecl_method.put(id, type);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      // TA CODE:
	   id_flag = 0;
      return n.f0.accept(this);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      //TA CODE:
	   return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
	      //TA CODE:
		   return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
	      //TA CODE:
		   return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      if(no_of_parse == 2)
      {
	      String type_id;
	      if(meth_name.equals(""))
	    	  type_id = classdet.get(class_name).vardecl_class.get(n.f0.f0.toString());
	      else
	      {
//	    	  System.out.println("assign "+ n.f0.f0.toString());
	    	  type_id = classdet.get(class_name).methoddet.get(meth_name).vardecl_method.get(n.f0.f0.toString());
//	    	  for(String key : classdet.get(class_name).methoddet.get(meth_name).vardecl_method.keySet())
//	    	  {
//	    		  System.out.print(classdet.get(class_name).methoddet.get(meth_name).vardecl_method.get(key));
//	    		  System.out.println(key);
//	    	  }
	      }
	      String type = (String)n.f2.accept(this);
//	      System.out.println(type);
//	      System.out.println(type_id);
	      if(!type_id.equals(type))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      if(no_of_parse == 2)
      {
	      id_flag = 1;
	      String id = (String) n.f0.accept(this);
	      String expbra = (String) n.f2.accept(this);
	      String exp = (String) n.f5.accept(this);
	      if(!id.equals("int[]") || !expbra.equals("int") || !exp.equals("int"))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      if(no_of_parse == 2)
      {
	      String exp = (String) n.f2.accept(this);
	      if(!exp.equals("boolean"))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	      n.f4.accept(this);
	      n.f6.accept(this);
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      if(no_of_parse == 2)
      {
	      String exp = (String) n.f2.accept(this);
	      if(!exp.equals("boolean"))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	      n.f4.accept(this);
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      if(no_of_parse == 2)
      {
      String str = (String)n.f2.accept(this);
      if(!str.equals("int"))
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      }
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      R ret = n.f0.accept(this);
      return ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      //R _ret=null;
	  if(no_of_parse == 2)
	  {
	      String p1 = (String) n.f0.accept(this);
	      String p2 = (String) n.f2.accept(this);
	      if((!p1.equals(p2)) || !(p1.equals("boolean")))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	  }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      //R _ret=null;
	  if(no_of_parse == 2)
	  {
	      String p1 = (String)n.f0.accept(this);
	      String p2 = (String)n.f2.accept(this);
	      if(!p1.equals("int") || !p2.equals("int"))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	  }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      //R _ret=null;
	   if(no_of_parse == 2)
	   {
		   String p1 = (String)n.f0.accept(this);
		   String p2 = (String)n.f2.accept(this);
		   if(!p1.equals("int") || !p2.equals("int"))
		   {
			   System.out.println("Type error");
			   System.exit(0);
		   }
	   }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      //R _ret=null;
	  if(no_of_parse == 2)
	  {
	      String p1 = (String)n.f0.accept(this);
		  String p2 = (String)n.f2.accept(this);
		  if(!p1.equals("int") || !p2.equals("int"))
		  {
			  System.out.println("Type error");
			  System.exit(0);
		  }
	  }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      //R _ret=null;
	  if(no_of_parse == 2)
	  {
		  String p1 = (String)n.f0.accept(this);
		  String p2 = (String)n.f2.accept(this);
		  if(!p1.equals("int") || !p2.equals("int"))
		  {
			  System.out.println("Type error");
			  System.exit(0);
		  }
	  }
	  return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      //R _ret=null;
	  if(no_of_parse == 2)
	  {
	      String p1 = (String) n.f0.accept(this);
	      String p2 = (String) n.f2.accept(this);
	      if(!p1.equals("int[]") || !p2.equals("int"))
	      {
			  System.out.println("Type error");
			  System.exit(0);
	      }
	  }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      //R _ret=null;
	  if(no_of_parse == 2)
	  {
	      String p1 = (String) n.f0.accept(this);
	      if(!p1.equals("int[]"))
	      {
			  System.out.println("Type error");
			  System.exit(0);
	      }
	  }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      if(no_of_parse == 2)
      {
	      pe = (String) n.f0.accept(this);
	      meth = n.f2.f0.toString();
	      if(!classdet.get(pe).methoddet.containsKey(meth))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	      exp_list = 0;
//	      System.out.println("class name " + pe);
//	      System.out.println("func name " + meth);
//	      System.out.println("explist value " + exp_list);
	      func.push(pe);
	      func.push(meth);
	      n.f4.accept(this);
	      if(exp_list != classdet.get(pe).methoddet.get(meth).parameters.size())
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	      func.pop();
	      func.pop();
//	      System.out.println(classdet.get(pe).methoddet.get(meth).return_type);
	      return (R)classdet.get(pe).methoddet.get(meth).return_type;
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
//      System.out.println(exp_list);
//      System.out.println(exp_list);
      String exp = (String) n.f0.accept(this);
      exp_list = 1;
      meth = func.peek();
      String temp = func.pop();
      pe = func.peek();
      func.push(temp);
//      System.out.println(exp_list);
//      System.out.println("call name " + pe);
//      System.out.println("function name " + meth);
//      System.out.println(exp);
//      System.out.println(exp_list);
//      System.out.println(classdet.get(pe).methoddet.get(meth).parameters.size());
//      System.out.println(classdet.get(pe).methoddet.get(meth).parameters.get(exp_list-1).type);
      if((exp_list <= classdet.get(pe).methoddet.get(meth).parameters.size())){
      if(!classdet.get(pe).methoddet.get(meth).parameters.get(exp_list-1).type.equals(exp))
      {
    	  if(extending.get(exp) != null)
    	  if(!extending.get(exp).equals(classdet.get(pe).methoddet.get(meth).parameters.get(exp_list-1).type))
    	  {
    	  System.out.println("Type error");
    	  System.exit(0);
    	  }
      }
      }
      else
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      exp_list++;
      String exp = (String) n.f1.accept(this);
//      System.out.println(exp);
//      System.out.println(classdet.get(pe).methoddet.get(meth).parameters.get(exp_list-1).type);
//      System.out.println(classdet.get(pe).methoddet.get(meth).parameters.size());
//      System.out.println(exp_list);
      if(!(exp_list <= classdet.get(pe).methoddet.get(meth).parameters.size()) || !classdet.get(pe).methoddet.get(meth).parameters.get(exp_list-1).type.equals(exp))
      {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      //R _ret=null;
	   id_flag = 1;
      return n.f0.accept(this);
      
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      //TA CODE:
	   R _ret = null;
//	   System.out.println(n.f0.toString());
	   if(id_flag == 0)
		   return (R)n.f0.toString();
	   if(no_of_parse == 2)
	   {
		   String str = n.f0.toString();
		   String type = "";
		   if(!meth_name.equals("") && classdet.get(class_name).methoddet.get(meth_name).vardecl_method.containsKey(str))
			   type = classdet.get(class_name).methoddet.get(meth_name).vardecl_method.get(str);
		   else
		   {
			   int f = 0;
			   if(!meth_name.equals(""))
			   for(VarDecl v : classdet.get(class_name).methoddet.get(meth_name).parameters)
			   {	
				   if(v.name.equals(str))
				   {
					   f = 1;
					   type = v.type;
					   return (R)type;
				   }
			   }
			   if(f == 0 && classdet.get(class_name).vardecl_class.containsKey(str))
			   {
				   type = classdet.get(class_name).vardecl_class.get(str);
			   }
			   else
			   {
				   System.out.println("Type error");
				   System.exit(0);
			   }
		   }
		   return (R)type;
	   }
	   return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      return (R)class_name;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
	  if(no_of_parse == 2)
	  {
	      String type = (String) n.f3.accept(this);
	      if(!type.equals("int"))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	      return (R)"int[]";
	  }
	  return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
	  if(no_of_parse == 2)
	  {
	      id_flag = 0;
	      String c_name = n.f1.f0.toString();
//	      System.out.println(c_name);
	      if(!classdet.containsKey(c_name))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	      return (R)c_name;
	  }
	  return _ret; 
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      //R _ret=null;
	  if(no_of_parse == 2)
	  {
	      String type = (String) n.f1.accept(this);
	      if(!type.equals("boolean"))
	      {
	    	  System.out.println("Type error");
	    	  System.exit(0);
	      }
	  }
      return (R)"boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      //R _ret=null;
      String type = (String)n.f1.accept(this);
      return (R) type;
   }

}
